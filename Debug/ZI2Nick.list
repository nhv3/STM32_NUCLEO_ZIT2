
ZI2Nick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a154  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a46c  0800a46c  000202a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a46c  0800a46c  0001a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a474  0800a474  000202a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a474  0800a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a478  0800a478  0001a478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800a47c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001e8  0800a664  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000248  0800a6c4  00020248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001a40  240002a8  0800a724  000202a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24001ce8  0800a724  00021ce8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a4f4  00000000  00000000  000202d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000047e7  00000000  00000000  0004a7ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001330  00000000  00000000  0004efb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001168  00000000  00000000  000502e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003a411  00000000  00000000  00051450  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00014db3  00000000  00000000  0008b861  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015edbb  00000000  00000000  000a0614  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001ff3cf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004fac  00000000  00000000  001ff44c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240002a8 	.word	0x240002a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a3d4 	.word	0x0800a3d4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240002ac 	.word	0x240002ac
 80002d4:	0800a3d4 	.word	0x0800a3d4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f000 fe52 	bl	80012e0 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa95 	bl	8000b70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 fdff 	bl	800a24e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240002d8 	.word	0x240002d8
 800066c:	40028000 	.word	0x40028000
 8000670:	24000248 	.word	0x24000248
 8000674:	240001e8 	.word	0x240001e8
 8000678:	24000348 	.word	0x24000348

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f001 f9bd 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f001 f9ad 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f001 f99c 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f001 f98b 	bl	8001b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a5f      	ldr	r2, [pc, #380]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a58      	ldr	r2, [pc, #352]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a50      	ldr	r2, [pc, #320]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <MX_GPIO_Init+0x19c>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <MX_GPIO_Init+0x19c>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b43      	ldr	r3, [pc, #268]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a41      	ldr	r2, [pc, #260]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a3a      	ldr	r2, [pc, #232]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	4a32      	ldr	r2, [pc, #200]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_GPIO_Init+0x19c>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f244 0101 	movw	r1, #16385	; 0x4001
 8000906:	482c      	ldr	r0, [pc, #176]	; (80009b8 <MX_GPIO_Init+0x1a0>)
 8000908:	f001 fab0 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	482a      	ldr	r0, [pc, #168]	; (80009bc <MX_GPIO_Init+0x1a4>)
 8000914:	f001 faaa 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2102      	movs	r1, #2
 800091c:	4828      	ldr	r0, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x1a8>)
 800091e:	f001 faa5 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4823      	ldr	r0, [pc, #140]	; (80009c4 <MX_GPIO_Init+0x1ac>)
 8000938:	f001 f8e8 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800093c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <MX_GPIO_Init+0x1a0>)
 8000956:	f001 f8d9 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800095a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_GPIO_Init+0x1a4>)
 8000974:	f001 f8ca 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x1b0>)
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_GPIO_Init+0x1b4>)
 800098c:	f001 f8be 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000990:	2302      	movs	r3, #2
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x1a8>)
 80009a8:	f001 f8b0 	bl	8001b0c <HAL_GPIO_Init>

}
 80009ac:	bf00      	nop
 80009ae:	3730      	adds	r7, #48	; 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58020400 	.word	0x58020400
 80009bc:	58020c00 	.word	0x58020c00
 80009c0:	58021000 	.word	0x58021000
 80009c4:	58020800 	.word	0x58020800
 80009c8:	11110000 	.word	0x11110000
 80009cc:	58021800 	.word	0x58021800

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 faa0 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f80a 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff ff1c 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 80009e0:	f7ff fdfa 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009e4:	f000 f9d8 	bl	8000d98 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80009e8:	f008 fec2 	bl	8009770 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <main+0x1c>
	...

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0cc      	sub	sp, #304	; 0x130
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009fa:	224c      	movs	r2, #76	; 0x4c
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f009 fc25 	bl	800a24e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a08:	2220      	movs	r2, #32
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f009 fc1e 	bl	800a24e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4618      	mov	r0, r3
 8000a18:	23bc      	movs	r3, #188	; 0xbc
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f009 fc16 	bl	800a24e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a22:	2002      	movs	r0, #2
 8000a24:	f002 fc16 	bl	8003254 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <SystemClock_Config+0x174>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <SystemClock_Config+0x174>)
 8000a34:	f023 0301 	bic.w	r3, r3, #1
 8000a38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a3a:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <SystemClock_Config+0x174>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	f003 0201 	and.w	r2, r3, #1
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4b48      	ldr	r3, [pc, #288]	; (8000b68 <SystemClock_Config+0x178>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a4e:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <SystemClock_Config+0x178>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <SystemClock_Config+0x178>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a66:	bf00      	nop
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <SystemClock_Config+0x178>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a74:	d1f8      	bne.n	8000a68 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8a:	2340      	movs	r3, #64	; 0x40
 8000a8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a90:	2302      	movs	r3, #2
 8000a92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aba:	230c      	movs	r3, #12
 8000abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fc09 	bl	80032e8 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000adc:	f000 f848 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	233f      	movs	r3, #63	; 0x3f
 8000ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 fff6 	bl	8003b08 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000b22:	f000 f825 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <SystemClock_Config+0x17c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2200      	movs	r2, #0
 8000b34:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fb62 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x166>
  {
    Error_Handler();
 8000b52:	f000 f80d 	bl	8000b70 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b56:	f002 fbb7 	bl	80032c8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b5a:	bf00      	nop
 8000b5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58000400 	.word	0x58000400
 8000b68:	58024800 	.word	0x58024800
 8000b6c:	00040002 	.word	0x00040002

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <Error_Handler+0x6>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b84:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b94:	f003 0302 	and.w	r3, r3, #2
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	58024400 	.word	0x58024400

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 fa00 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f001 faa1 	bl	800214c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	240018dc 	.word	0x240018dc

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f009 fabe 	bl	800a1c4 <__errno>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	230c      	movs	r3, #12
 8000c4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24080000 	.word	0x24080000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	240002c4 	.word	0x240002c4
 8000c7c:	24001ce8 	.word	0x24001ce8

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <SystemInit+0xec>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a38      	ldr	r2, [pc, #224]	; (8000d6c <SystemInit+0xec>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <SystemInit+0xf0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	d807      	bhi.n	8000cb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <SystemInit+0xf0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f023 030f 	bic.w	r3, r3, #15
 8000ca8:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <SystemInit+0xf0>)
 8000caa:	f043 0307 	orr.w	r3, r3, #7
 8000cae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <SystemInit+0xf4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a2f      	ldr	r2, [pc, #188]	; (8000d74 <SystemInit+0xf4>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <SystemInit+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <SystemInit+0xf4>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	492b      	ldr	r1, [pc, #172]	; (8000d74 <SystemInit+0xf4>)
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <SystemInit+0xf8>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <SystemInit+0xf0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d907      	bls.n	8000cea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <SystemInit+0xf0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 030f 	bic.w	r3, r3, #15
 8000ce2:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <SystemInit+0xf0>)
 8000ce4:	f043 0307 	orr.w	r3, r3, #7
 8000ce8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cea:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <SystemInit+0xf4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <SystemInit+0xf4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <SystemInit+0xf4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <SystemInit+0xf4>)
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <SystemInit+0xfc>)
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <SystemInit+0xf4>)
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <SystemInit+0x100>)
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <SystemInit+0xf4>)
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <SystemInit+0x104>)
 8000d0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <SystemInit+0xf4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <SystemInit+0xf4>)
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <SystemInit+0x104>)
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <SystemInit+0xf4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <SystemInit+0xf4>)
 8000d22:	4a18      	ldr	r2, [pc, #96]	; (8000d84 <SystemInit+0x104>)
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <SystemInit+0xf4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <SystemInit+0xf4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <SystemInit+0xf4>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <SystemInit+0xf4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <SystemInit+0x108>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <SystemInit+0x10c>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d4a:	d202      	bcs.n	8000d52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <SystemInit+0x110>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <SystemInit+0x114>)
 8000d54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d58:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SystemInit+0xec>)
 8000d5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d60:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	52002000 	.word	0x52002000
 8000d74:	58024400 	.word	0x58024400
 8000d78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d7c:	02020200 	.word	0x02020200
 8000d80:	01ff0000 	.word	0x01ff0000
 8000d84:	01010280 	.word	0x01010280
 8000d88:	5c001000 	.word	0x5c001000
 8000d8c:	ffff0000 	.word	0xffff0000
 8000d90:	51008108 	.word	0x51008108
 8000d94:	52004000 	.word	0x52004000

08000d98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000d9e:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <MX_USART3_UART_Init+0x94>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000de0:	4811      	ldr	r0, [pc, #68]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000de2:	f004 fd15 	bl	8005810 <HAL_UART_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dec:	f7ff fec0 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	480d      	ldr	r0, [pc, #52]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000df4:	f005 fcaf 	bl	8006756 <HAL_UARTEx_SetTxFifoThreshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dfe:	f7ff feb7 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4808      	ldr	r0, [pc, #32]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000e06:	f005 fce4 	bl	80067d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e10:	f7ff feae 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_USART3_UART_Init+0x90>)
 8000e16:	f005 fc65 	bl	80066e4 <HAL_UARTEx_DisableFifoMode>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f7ff fea6 	bl	8000b70 <Error_Handler>
  }

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2400037c 	.word	0x2400037c
 8000e2c:	40004800 	.word	0x40004800

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <HAL_UART_MspInit+0x88>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12e      	bne.n	8000eb0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_MspInit+0x8c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0x90>)
 8000eac:	f000 fe2e 	bl	8001b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020c00 	.word	0x58020c00

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ec8:	f7ff feda 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f009 f96d 	bl	800a1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fd6b 	bl	80009d0 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000f00:	0800a47c 	.word	0x0800a47c
  ldr  r0, =_sdata
 8000f04:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000f08:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 8000f0c:	240002a8 	.word	0x240002a8
  ldr  r3, = _ebss
 8000f10:	24001ce8 	.word	0x24001ce8

08000f14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC3_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f99e 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f24:	f002 ffa6 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_Init+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_Init+0x6c>)
 8000f36:	5cd3      	ldrb	r3, [r2, r3]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_Init+0x68>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_Init+0x6c>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_Init+0x70>)
 8000f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_Init+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f814 	bl	8000f90 <HAL_InitTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e002      	b.n	8000f78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f72:	f7ff fe01 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	0800a444 	.word	0x0800a444
 8000f88:	24000004 	.word	0x24000004
 8000f8c:	24000000 	.word	0x24000000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e021      	b.n	8000fe8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_InitTick+0x64>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_InitTick+0x60>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f983 	bl	80012c6 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f94d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x68>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	24000000 	.word	0x24000000
 8000ff8:	24000008 	.word	0x24000008

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2400000c 	.word	0x2400000c
 8001020:	24000408 	.word	0x24000408

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	24000408 	.word	0x24000408

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400000c 	.word	0x2400000c

08001080 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetREVID+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0c1b      	lsrs	r3, r3, #16
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	5c001000 	.word	0x5c001000

08001098 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	58000400 	.word	0x58000400

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e0c6      	b.n	8001480 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff f9be 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2223      	movs	r2, #35	; 0x23
 8001304:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b60      	ldr	r3, [pc, #384]	; (8001488 <HAL_ETH_Init+0x1a8>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	4a5e      	ldr	r2, [pc, #376]	; (8001488 <HAL_ETH_Init+0x1a8>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <HAL_ETH_Init+0x1a8>)
 8001318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7a1b      	ldrb	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff feb3 	bl	8001098 <HAL_SYSCFG_ETHInterfaceSelect>
 8001332:	e003      	b.n	800133c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001334:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001338:	f7ff feae 	bl	8001098 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff fe66 	bl	8001024 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800135a:	e00f      	b.n	800137c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800135c:	f7ff fe62 	bl	8001024 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800136a:	d907      	bls.n	800137c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2204      	movs	r2, #4
 8001370:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	22e0      	movs	r2, #224	; 0xe0
 8001376:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e081      	b.n	8001480 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1e6      	bne.n	800135c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fac0 	bl	8001914 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001394:	f002 fee0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8001398:	4602      	mov	r2, r0
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <HAL_ETH_Init+0x1ac>)
 800139c:	fba3 2302 	umull	r2, r3, r3, r2
 80013a0:	0c9a      	lsrs	r2, r3, #18
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3a01      	subs	r2, #1
 80013a8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa13 	bl	80017d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013cc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	22e0      	movs	r2, #224	; 0xe0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e04a      	b.n	8001480 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80013f2:	4413      	add	r3, r2
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_ETH_Init+0x1b0>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6952      	ldr	r2, [r2, #20]
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	6809      	ldr	r1, [r1, #0]
 8001404:	431a      	orrs	r2, r3
 8001406:	f241 1308 	movw	r3, #4360	; 0x1108
 800140a:	440b      	add	r3, r1
 800140c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fad8 	bl	80019c4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fb1c 	bl	8001a52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	3305      	adds	r3, #5
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021a      	lsls	r2, r3, #8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	3304      	adds	r3, #4
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	3303      	adds	r3, #3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	061a      	lsls	r2, r3, #24
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	3302      	adds	r3, #2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001458:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001466:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001468:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2210      	movs	r2, #16
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2210      	movs	r2, #16
 800147c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400
 800148c:	431bde83 	.word	0x431bde83
 8001490:	ffff8001 	.word	0xffff8001

08001494 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80014a6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80014ae:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	7b1b      	ldrb	r3, [r3, #12]
 80014b4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80014b6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	7b5b      	ldrb	r3, [r3, #13]
 80014bc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014be:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	7b9b      	ldrb	r3, [r3, #14]
 80014c4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80014c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	7bdb      	ldrb	r3, [r3, #15]
 80014cc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014ce:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	7c12      	ldrb	r2, [r2, #16]
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d102      	bne.n	80014de <ETH_SetMACConfig+0x4a>
 80014d8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014dc:	e000      	b.n	80014e0 <ETH_SetMACConfig+0x4c>
 80014de:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014e0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	7c52      	ldrb	r2, [r2, #17]
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d102      	bne.n	80014f0 <ETH_SetMACConfig+0x5c>
 80014ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014ee:	e000      	b.n	80014f2 <ETH_SetMACConfig+0x5e>
 80014f0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014f2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7c9b      	ldrb	r3, [r3, #18]
 80014f8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014fa:	431a      	orrs	r2, r3
                                macconf->Speed |
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001500:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001506:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7f1b      	ldrb	r3, [r3, #28]
 800150c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800150e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	7f5b      	ldrb	r3, [r3, #29]
 8001514:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001516:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	7f92      	ldrb	r2, [r2, #30]
 800151c:	2a00      	cmp	r2, #0
 800151e:	d102      	bne.n	8001526 <ETH_SetMACConfig+0x92>
 8001520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001524:	e000      	b.n	8001528 <ETH_SetMACConfig+0x94>
 8001526:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001528:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	7fdb      	ldrb	r3, [r3, #31]
 800152e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001530:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001538:	2a00      	cmp	r2, #0
 800153a:	d102      	bne.n	8001542 <ETH_SetMACConfig+0xae>
 800153c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001540:	e000      	b.n	8001544 <ETH_SetMACConfig+0xb0>
 8001542:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001544:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800154a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001552:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001554:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <ETH_SetMACConfig+0x22c>)
 8001566:	4013      	ands	r3, r2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	68f9      	ldr	r1, [r7, #12]
 800156e:	430b      	orrs	r3, r1
 8001570:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001576:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800157e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001580:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001588:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800158a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001592:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001594:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800159c:	2a00      	cmp	r2, #0
 800159e:	d102      	bne.n	80015a6 <ETH_SetMACConfig+0x112>
 80015a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015a4:	e000      	b.n	80015a8 <ETH_SetMACConfig+0x114>
 80015a6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80015a8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <ETH_SetMACConfig+0x230>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	68f9      	ldr	r1, [r7, #12]
 80015c2:	430b      	orrs	r3, r1
 80015c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <ETH_SetMACConfig+0x234>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	430b      	orrs	r3, r1
 80015e8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80015f0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80015f6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d101      	bne.n	8001606 <ETH_SetMACConfig+0x172>
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	e000      	b.n	8001608 <ETH_SetMACConfig+0x174>
 8001606:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001608:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800161a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	68f9      	ldr	r1, [r7, #12]
 8001626:	430b      	orrs	r3, r1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001630:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001638:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	f023 0103 	bic.w	r1, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	430a      	orrs	r2, r1
 8001652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800165e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800167a:	2a00      	cmp	r2, #0
 800167c:	d101      	bne.n	8001682 <ETH_SetMACConfig+0x1ee>
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	e000      	b.n	8001684 <ETH_SetMACConfig+0x1f0>
 8001682:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001684:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800168c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800168e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001696:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001698:	4313      	orrs	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80016a4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	00048083 	.word	0x00048083
 80016c4:	c0f88000 	.word	0xc0f88000
 80016c8:	fffffef0 	.word	0xfffffef0

080016cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <ETH_SetDMAConfig+0xf8>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	6809      	ldr	r1, [r1, #0]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80016f2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80016fe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	7b1b      	ldrb	r3, [r3, #12]
 8001704:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001712:	4413      	add	r3, r2
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <ETH_SetDMAConfig+0xfc>)
 8001718:	4013      	ands	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6811      	ldr	r1, [r2, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	431a      	orrs	r2, r3
 8001722:	f241 0304 	movw	r3, #4100	; 0x1004
 8001726:	440b      	add	r3, r1
 8001728:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	7b5b      	ldrb	r3, [r3, #13]
 800172e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <ETH_SetDMAConfig+0x100>)
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	431a      	orrs	r2, r3
 800174e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001752:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	7d1b      	ldrb	r3, [r3, #20]
 800175c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800175e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	7f5b      	ldrb	r3, [r3, #29]
 8001764:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001772:	4413      	add	r3, r2
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <ETH_SetDMAConfig+0x104>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6811      	ldr	r1, [r2, #0]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	f241 1304 	movw	r3, #4356	; 0x1104
 8001786:	440b      	add	r3, r1
 8001788:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	7f1b      	ldrb	r3, [r3, #28]
 800178e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f241 1308 	movw	r3, #4360	; 0x1108
 80017a0:	4413      	add	r3, r2
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <ETH_SetDMAConfig+0x108>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6811      	ldr	r1, [r2, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	f241 1308 	movw	r3, #4360	; 0x1108
 80017b4:	440b      	add	r3, r1
 80017b6:	601a      	str	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	ffff87fd 	.word	0xffff87fd
 80017c8:	ffff2ffe 	.word	0xffff2ffe
 80017cc:	fffec000 	.word	0xfffec000
 80017d0:	ffc0efef 	.word	0xffc0efef
 80017d4:	7fc0ffff 	.word	0x7fc0ffff

080017d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b0a4      	sub	sp, #144	; 0x90
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e6:	2300      	movs	r3, #0
 80017e8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001802:	2301      	movs	r3, #1
 8001804:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800180e:	2301      	movs	r3, #1
 8001810:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001820:	2300      	movs	r3, #0
 8001822:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001830:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001840:	2301      	movs	r3, #1
 8001842:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001852:	2300      	movs	r3, #0
 8001854:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001856:	2300      	movs	r3, #0
 8001858:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800185a:	2300      	movs	r3, #0
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001870:	2320      	movs	r3, #32
 8001872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001882:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018b2:	2300      	movs	r3, #0
 80018b4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fde6 	bl	8001494 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80018f8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fee1 	bl	80016cc <ETH_SetDMAConfig>
}
 800190a:	bf00      	nop
 800190c:	3790      	adds	r7, #144	; 0x90
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001924:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800192c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800192e:	f002 fc13 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8001932:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d908      	bls.n	800194e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d804      	bhi.n	800194e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e027      	b.n	800199e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d908      	bls.n	8001968 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d804      	bhi.n	8001968 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e01a      	b.n	800199e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d903      	bls.n	8001978 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d911      	bls.n	800199c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4a10      	ldr	r2, [pc, #64]	; (80019bc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d908      	bls.n	8001992 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d804      	bhi.n	8001992 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e005      	b.n	800199e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e000      	b.n	800199e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800199c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	01312cff 	.word	0x01312cff
 80019b4:	02160ebf 	.word	0x02160ebf
 80019b8:	039386ff 	.word	0x039386ff
 80019bc:	05f5e0ff 	.word	0x05f5e0ff
 80019c0:	08f0d17f 	.word	0x08f0d17f

080019c4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e01d      	b.n	8001a0e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68d9      	ldr	r1, [r3, #12]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2200      	movs	r2, #0
 80019fa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019fc:	68b9      	ldr	r1, [r7, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	3206      	adds	r2, #6
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d9de      	bls.n	80019d2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001a22:	4413      	add	r3, r2
 8001a24:	2203      	movs	r2, #3
 8001a26:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68d9      	ldr	r1, [r3, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	f241 1314 	movw	r3, #4372	; 0x1114
 8001a34:	4413      	add	r3, r2
 8001a36:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001a44:	601a      	str	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e024      	b.n	8001aaa <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6919      	ldr	r1, [r3, #16]
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	330a      	adds	r3, #10
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d9d7      	bls.n	8001a60 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f241 1330 	movw	r3, #4400	; 0x1130
 8001ad6:	4413      	add	r3, r2
 8001ad8:	2203      	movs	r2, #3
 8001ada:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6919      	ldr	r1, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f241 131c 	movw	r3, #4380	; 0x111c
 8001ae8:	4413      	add	r3, r2
 8001aea:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f241 1328 	movw	r3, #4392	; 0x1128
 8001afc:	4413      	add	r3, r2
 8001afe:	6019      	str	r1, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b1a:	4b89      	ldr	r3, [pc, #548]	; (8001d40 <HAL_GPIO_Init+0x234>)
 8001b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b1e:	e194      	b.n	8001e4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2101      	movs	r1, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8186 	beq.w	8001e44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d00b      	beq.n	8001b58 <HAL_GPIO_Init+0x4c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b12      	cmp	r3, #18
 8001b56:	d130      	bne.n	8001bba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b8e:	2201      	movs	r2, #1
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 0201 	and.w	r2, r3, #1
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0xee>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d123      	bne.n	8001c42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	08da      	lsrs	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3208      	adds	r2, #8
 8001c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	69b9      	ldr	r1, [r7, #24]
 8001c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0203 	and.w	r2, r3, #3
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80e0 	beq.w	8001e44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x238>)
 8001c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c8a:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <HAL_GPIO_Init+0x238>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_GPIO_Init+0x238>)
 8001c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x23c>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <HAL_GPIO_Init+0x240>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d052      	beq.n	8001d74 <HAL_GPIO_Init+0x268>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_GPIO_Init+0x244>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d031      	beq.n	8001d3a <HAL_GPIO_Init+0x22e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <HAL_GPIO_Init+0x248>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02b      	beq.n	8001d36 <HAL_GPIO_Init+0x22a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_GPIO_Init+0x24c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_GPIO_Init+0x250>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_GPIO_Init+0x254>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_GPIO_Init+0x258>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x25c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x216>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_GPIO_Init+0x260>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x212>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_GPIO_Init+0x264>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x20e>
 8001d16:	2309      	movs	r3, #9
 8001d18:	e02d      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	e02b      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d1e:	2308      	movs	r3, #8
 8001d20:	e029      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d22:	2307      	movs	r3, #7
 8001d24:	e027      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d26:	2306      	movs	r3, #6
 8001d28:	e025      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e023      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e021      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e01f      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e01d      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01b      	b.n	8001d76 <HAL_GPIO_Init+0x26a>
 8001d3e:	bf00      	nop
 8001d40:	58000080 	.word	0x58000080
 8001d44:	58024400 	.word	0x58024400
 8001d48:	58000400 	.word	0x58000400
 8001d4c:	58020000 	.word	0x58020000
 8001d50:	58020400 	.word	0x58020400
 8001d54:	58020800 	.word	0x58020800
 8001d58:	58020c00 	.word	0x58020c00
 8001d5c:	58021000 	.word	0x58021000
 8001d60:	58021400 	.word	0x58021400
 8001d64:	58021800 	.word	0x58021800
 8001d68:	58021c00 	.word	0x58021c00
 8001d6c:	58022000 	.word	0x58022000
 8001d70:	58022400 	.word	0x58022400
 8001d74:	2300      	movs	r3, #0
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d86:	4938      	ldr	r1, [pc, #224]	; (8001e68 <HAL_GPIO_Init+0x35c>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f ae63 	bne.w	8001b20 <HAL_GPIO_Init+0x14>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	; 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	58000400 	.word	0x58000400

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea0:	b08f      	sub	sp, #60	; 0x3c
 8001ea2:	af0a      	add	r7, sp, #40	; 0x28
 8001ea4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e116      	b.n	80020de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f007 fe6e 	bl	8009bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fe2b 	bl	8006b4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	687e      	ldr	r6, [r7, #4]
 8001efc:	466d      	mov	r5, sp
 8001efe:	f106 0410 	add.w	r4, r6, #16
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f12:	1d33      	adds	r3, r6, #4
 8001f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f16:	6838      	ldr	r0, [r7, #0]
 8001f18:	f004 fd02 	bl	8006920 <USB_CoreInit>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0d7      	b.n	80020de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 fe19 	bl	8006b6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e04a      	b.n	8001fd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	333d      	adds	r3, #61	; 0x3d
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	333c      	adds	r3, #60	; 0x3c
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3342      	adds	r3, #66	; 0x42
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333f      	adds	r3, #63	; 0x3f
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3344      	adds	r3, #68	; 0x44
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3348      	adds	r3, #72	; 0x48
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3350      	adds	r3, #80	; 0x50
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3af      	bcc.n	8001f40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e044      	b.n	8002070 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	3301      	adds	r3, #1
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d3b5      	bcc.n	8001fe6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	687e      	ldr	r6, [r7, #4]
 8002082:	466d      	mov	r5, sp
 8002084:	f106 0410 	add.w	r4, r6, #16
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002094:	e885 0003 	stmia.w	r5, {r0, r1}
 8002098:	1d33      	adds	r3, r6, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f004 fd8f 	bl	8006bc0 <USB_DevInit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e014      	b.n	80020de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d102      	bne.n	80020d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f001 f891 	bl	80031f4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 fdce 	bl	8007c78 <USB_DevDisconnect>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_PCD_Start+0x1c>
 80020fe:	2302      	movs	r3, #2
 8002100:	e020      	b.n	8002144 <HAL_PCD_Start+0x5e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	2b01      	cmp	r3, #1
 8002110:	d109      	bne.n	8002126 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f005 fd8c 	bl	8007c48 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fcf7 	bl	8006b28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b08d      	sub	sp, #52	; 0x34
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f005 fe33 	bl	8007dce <USB_GetMode>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 83ca 	bne.w	8002904 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f005 fd97 	bl	8007ca8 <USB_ReadInterrupts>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 83c0 	beq.w	8002902 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f005 fd8e 	bl	8007ca8 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d107      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 0202 	and.w	r2, r2, #2
 80021a4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 fd7c 	bl	8007ca8 <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d161      	bne.n	800227e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0210 	bic.w	r2, r2, #16
 80021c8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	0c5b      	lsrs	r3, r3, #17
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d124      	bne.n	8002240 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d035      	beq.n	800226e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800220c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002210:	b29b      	uxth	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	6a38      	ldr	r0, [r7, #32]
 8002216:	f005 fbf4 	bl	8007a02 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002226:	441a      	add	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002238:	441a      	add	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	e016      	b.n	800226e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	0c5b      	lsrs	r3, r3, #17
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	2b06      	cmp	r3, #6
 800224a:	d110      	bne.n	800226e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002252:	2208      	movs	r2, #8
 8002254:	4619      	mov	r1, r3
 8002256:	6a38      	ldr	r0, [r7, #32]
 8002258:	f005 fbd3 	bl	8007a02 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002268:	441a      	add	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0210 	orr.w	r2, r2, #16
 800227c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f005 fd10 	bl	8007ca8 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002292:	d16e      	bne.n	8002372 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f005 fd16 	bl	8007cce <USB_ReadDevAllOutEpInterrupt>
 80022a2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022a4:	e062      	b.n	800236c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d057      	beq.n	8002360 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f005 fd3b 	bl	8007d36 <USB_ReadDevOutEPInterrupt>
 80022c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d8:	461a      	mov	r2, r3
 80022da:	2301      	movs	r3, #1
 80022dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fddd 	bl	8002ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00c      	beq.n	800230a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	461a      	mov	r2, r3
 80022fe:	2308      	movs	r3, #8
 8002300:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fed7 	bl	80030b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002320:	461a      	mov	r2, r3
 8002322:	2310      	movs	r3, #16
 8002324:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233c:	461a      	mov	r2, r3
 800233e:	2320      	movs	r3, #32
 8002340:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3301      	adds	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	2b00      	cmp	r3, #0
 8002370:	d199      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fc96 	bl	8007ca8 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002386:	f040 80c0 	bne.w	800250a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f005 fcb7 	bl	8007d02 <USB_ReadDevAllInEpInterrupt>
 8002394:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800239a:	e0b2      	b.n	8002502 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80a7 	beq.w	80024f6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f005 fcdd 	bl	8007d72 <USB_ReadDevInEPInterrupt>
 80023b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d057      	beq.n	8002474 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	2201      	movs	r2, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69f9      	ldr	r1, [r7, #28]
 80023e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023e4:	4013      	ands	r3, r2
 80023e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f4:	461a      	mov	r2, r3
 80023f6:	2301      	movs	r3, #1
 80023f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d132      	bne.n	8002468 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3348      	adds	r3, #72	; 0x48
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4403      	add	r3, r0
 8002422:	3344      	adds	r3, #68	; 0x44
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4419      	add	r1, r3
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4403      	add	r3, r0
 8002436:	3348      	adds	r3, #72	; 0x48
 8002438:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <HAL_PCD_IRQHandler+0x31c>
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3350      	adds	r3, #80	; 0x50
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002460:	461a      	mov	r2, r3
 8002462:	2101      	movs	r1, #1
 8002464:	f005 fce6 	bl	8007e34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f007 fc29 	bl	8009cc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800248a:	461a      	mov	r2, r3
 800248c:	2308      	movs	r3, #8
 800248e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a6:	461a      	mov	r2, r3
 80024a8:	2310      	movs	r3, #16
 80024aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c2:	461a      	mov	r2, r3
 80024c4:	2340      	movs	r3, #64	; 0x40
 80024c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024de:	461a      	mov	r2, r3
 80024e0:	2302      	movs	r3, #2
 80024e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fc48 	bl	8002d86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f af49 	bne.w	800239c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f005 fbca 	bl	8007ca8 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800251a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800251e:	d122      	bne.n	8002566 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002546:	2100      	movs	r1, #0
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fe77 	bl	800323c <HAL_PCDEx_LPM_Callback>
 800254e:	e002      	b.n	8002556 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f007 fc2f 	bl	8009db4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f005 fb9c 	bl	8007ca8 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800257a:	d112      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d102      	bne.n	8002592 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f007 fbeb 	bl	8009d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025a0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f005 fb7e 	bl	8007ca8 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d121      	bne.n	80025fc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695a      	ldr	r2, [r3, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80025c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d111      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	f003 020f 	and.w	r2, r3, #15
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025ec:	2101      	movs	r1, #1
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fe24 	bl	800323c <HAL_PCDEx_LPM_Callback>
 80025f4:	e002      	b.n	80025fc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f007 fbb6 	bl	8009d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f005 fb51 	bl	8007ca8 <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	f040 80c7 	bne.w	80027a2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2110      	movs	r1, #16
 800262e:	4618      	mov	r0, r3
 8002630:	f004 fc24 	bl	8006e7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002638:	e056      	b.n	80026e8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	461a      	mov	r2, r3
 8002648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800264c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	440a      	add	r2, r1
 8002664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800266c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800268c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b2:	0151      	lsls	r1, r2, #5
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	440a      	add	r2, r1
 80026b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d2:	0151      	lsls	r1, r2, #5
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	440a      	add	r2, r1
 80026d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	3301      	adds	r3, #1
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3a3      	bcc.n	800263a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002700:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002704:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2b00      	cmp	r3, #0
 800270c:	d016      	beq.n	800273c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271e:	f043 030b 	orr.w	r3, r3, #11
 8002722:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002734:	f043 030b 	orr.w	r3, r3, #11
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	e015      	b.n	8002768 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274a:	4619      	mov	r1, r3
 800274c:	f242 032b 	movw	r3, #8235	; 0x202b
 8002750:	4313      	orrs	r3, r2
 8002752:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f043 030b 	orr.w	r3, r3, #11
 8002766:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800277a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800278c:	461a      	mov	r2, r3
 800278e:	f005 fb51 	bl	8007e34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f005 fa7e 	bl	8007ca8 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b6:	d124      	bne.n	8002802 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fb15 	bl	8007dec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f004 fbb9 	bl	8006f3e <USB_GetDevSpeed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	f001 fcbe 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80027dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f004 f8fc 	bl	80069e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f007 fa92 	bl	8009d16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002800:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f005 fa4e 	bl	8007ca8 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d10a      	bne.n	800282c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f007 fa6f 	bl	8009cfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f002 0208 	and.w	r2, r2, #8
 800282a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f005 fa39 	bl	8007ca8 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002840:	d10f      	bne.n	8002862 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f007 fad1 	bl	8009df4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f005 fa1e 	bl	8007ca8 <USB_ReadInterrupts>
 800286c:	4603      	mov	r3, r0
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002876:	d10f      	bne.n	8002898 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f007 faa4 	bl	8009dd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fa03 	bl	8007ca8 <USB_ReadInterrupts>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d10a      	bne.n	80028c4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f007 fab2 	bl	8009e18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f005 f9ed 	bl	8007ca8 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d115      	bne.n	8002904 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f007 faa2 	bl	8009e34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e000      	b.n	8002904 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002902:	bf00      	nop
    }
  }
}
 8002904:	3734      	adds	r7, #52	; 0x34
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}

0800290a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_PCD_SetAddress+0x1a>
 8002920:	2302      	movs	r3, #2
 8002922:	e013      	b.n	800294c <HAL_PCD_SetAddress+0x42>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f005 f95d 	bl	8007bfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	70fb      	strb	r3, [r7, #3]
 8002966:	460b      	mov	r3, r1
 8002968:	803b      	strh	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da0f      	bge.n	800299a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	3338      	adds	r3, #56	; 0x38
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	3304      	adds	r3, #4
 8002990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	705a      	strb	r2, [r3, #1]
 8002998:	e00f      	b.n	80029ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029c6:	883a      	ldrh	r2, [r7, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	78ba      	ldrb	r2, [r7, #2]
 80029d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029e4:	78bb      	ldrb	r3, [r7, #2]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d102      	bne.n	80029f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_PCD_EP_Open+0xaa>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e00e      	b.n	8002a1c <HAL_PCD_EP_Open+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fabb 	bl	8006f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da0f      	bge.n	8002a58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	3338      	adds	r3, #56	; 0x38
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	705a      	strb	r2, [r3, #1]
 8002a56:	e00f      	b.n	8002a78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3304      	adds	r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_Close+0x6e>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e00e      	b.n	8002ab0 <HAL_PCD_EP_Close+0x8c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 faf9 	bl	8007098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	f003 020f 	and.w	r2, r3, #15
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2200      	movs	r2, #0
 8002af8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002afa:	7afb      	ldrb	r3, [r7, #11]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b14:	7afb      	ldrb	r3, [r7, #11]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	f004 fddc 	bl	80076e8 <USB_EP0StartXfer>
 8002b30:	e008      	b.n	8002b44 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	f004 fb86 	bl	8007250 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	460b      	mov	r3, r1
 8002b58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 020f 	and.w	r2, r3, #15
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b70:	681b      	ldr	r3, [r3, #0]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3338      	adds	r3, #56	; 0x38
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	f004 fd7a 	bl	80076e8 <USB_EP0StartXfer>
 8002bf4:	e008      	b.n	8002c08 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	6979      	ldr	r1, [r7, #20]
 8002c04:	f004 fb24 	bl	8007250 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d901      	bls.n	8002c30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e050      	b.n	8002cd2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da0f      	bge.n	8002c58 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	4613      	mov	r3, r2
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	3338      	adds	r3, #56	; 0x38
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	705a      	strb	r2, [r3, #1]
 8002c56:	e00d      	b.n	8002c74 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_PCD_EP_SetStall+0x82>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e01e      	b.n	8002cd2 <HAL_PCD_EP_SetStall+0xc0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68f9      	ldr	r1, [r7, #12]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fed6 	bl	8007a54 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	b2d9      	uxtb	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f005 f8b6 	bl	8007e34 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 020f 	and.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d901      	bls.n	8002cf8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e042      	b.n	8002d7e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da0f      	bge.n	8002d20 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	3338      	adds	r3, #56	; 0x38
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
 8002d1e:	e00f      	b.n	8002d40 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	f003 020f 	and.w	r2, r3, #15
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	3304      	adds	r3, #4
 8002d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_PCD_EP_ClrStall+0x86>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e00e      	b.n	8002d7e <HAL_PCD_EP_ClrStall+0xa4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68f9      	ldr	r1, [r7, #12]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fede 	bl	8007b30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08a      	sub	sp, #40	; 0x28
 8002d8a:	af02      	add	r7, sp, #8
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	3338      	adds	r3, #56	; 0x38
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	3304      	adds	r3, #4
 8002dac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d901      	bls.n	8002dbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06c      	b.n	8002e98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d902      	bls.n	8002dda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3303      	adds	r3, #3
 8002dde:	089b      	lsrs	r3, r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de2:	e02b      	b.n	8002e3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d902      	bls.n	8002e00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3303      	adds	r3, #3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68d9      	ldr	r1, [r3, #12]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f004 fdba 	bl	8007998 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d809      	bhi.n	8002e66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d203      	bcs.n	8002e66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1be      	bne.n	8002de4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d811      	bhi.n	8002e96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	2201      	movs	r2, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	6939      	ldr	r1, [r7, #16]
 8002e8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e92:	4013      	ands	r3, r2
 8002e94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	333c      	adds	r3, #60	; 0x3c
 8002eb8:	3304      	adds	r3, #4
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	f040 80a0 	bne.w	8003018 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d015      	beq.n	8002f0e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a72      	ldr	r2, [pc, #456]	; (80030b0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	f240 80dd 	bls.w	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d7 	beq.w	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f04:	461a      	mov	r2, r3
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	6093      	str	r3, [r2, #8]
 8002f0c:	e0cb      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2320      	movs	r3, #32
 8002f28:	6093      	str	r3, [r2, #8]
 8002f2a:	e0bc      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 80b7 	bne.w	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a5d      	ldr	r2, [pc, #372]	; (80030b0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d90f      	bls.n	8002f60 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f56:	461a      	mov	r2, r3
 8002f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5c:	6093      	str	r3, [r2, #8]
 8002f5e:	e0a2      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f72:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f86:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4403      	add	r3, r0
 8002f96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f9a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4403      	add	r3, r0
 8002fbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4419      	add	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4403      	add	r3, r0
 8002fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d114      	bne.n	800300a <PCD_EP_OutXfrComplete_int+0x16a>
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003002:	461a      	mov	r2, r3
 8003004:	2101      	movs	r1, #1
 8003006:	f004 ff15 	bl	8007e34 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f006 fe3d 	bl	8009c90 <HAL_PCD_DataOutStageCallback>
 8003016:	e046      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d124      	bne.n	800306a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	e032      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	2320      	movs	r3, #32
 800305a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f006 fe14 	bl	8009c90 <HAL_PCD_DataOutStageCallback>
 8003068:	e01d      	b.n	80030a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d114      	bne.n	800309a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	1a9b      	subs	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003092:	461a      	mov	r2, r3
 8003094:	2100      	movs	r1, #0
 8003096:	f004 fecd 	bl	8007e34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f006 fdf5 	bl	8009c90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	4f54300a 	.word	0x4f54300a
 80030b4:	4f54310a 	.word	0x4f54310a

080030b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	333c      	adds	r3, #60	; 0x3c
 80030d0:	3304      	adds	r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <PCD_EP_OutSetupPacket_int+0x88>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d90e      	bls.n	800310c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d009      	beq.n	800310c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f006 fdad 	bl	8009c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <PCD_EP_OutSetupPacket_int+0x88>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d90c      	bls.n	8003134 <PCD_EP_OutSetupPacket_int+0x7c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d108      	bne.n	8003134 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800312c:	461a      	mov	r2, r3
 800312e:	2101      	movs	r1, #1
 8003130:	f004 fe80 	bl	8007e34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	4f54300a 	.word	0x4f54300a

08003144 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
 8003150:	4613      	mov	r3, r2
 8003152:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003162:	883b      	ldrh	r3, [r7, #0]
 8003164:	0419      	lsls	r1, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	430a      	orrs	r2, r1
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
 8003170:	e028      	b.n	80031c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003180:	2300      	movs	r3, #0
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	e00d      	b.n	80031a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	3340      	adds	r3, #64	; 0x40
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	0c1b      	lsrs	r3, r3, #16
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4413      	add	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	3301      	adds	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d3ec      	bcc.n	8003186 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031ac:	883b      	ldrh	r3, [r7, #0]
 80031ae:	0418      	lsls	r0, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4302      	orrs	r2, r0
 80031bc:	3340      	adds	r3, #64	; 0x40
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_PCDEx_ActivateLPM+0x44>)
 8003224:	4313      	orrs	r3, r2
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	10000003 	.word	0x10000003

0800323c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d00a      	beq.n	800327e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e01f      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e01d      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	490f      	ldr	r1, [pc, #60]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800328e:	f7fd fec9 	bl	8001024 <HAL_GetTick>
 8003292:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003294:	e009      	b.n	80032aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003296:	f7fd fec5 	bl	8001024 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a4:	d901      	bls.n	80032aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e007      	b.n	80032ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_PWREx_ConfigSupply+0x70>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d1ee      	bne.n	8003296 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58024800 	.word	0x58024800

080032c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	58024800 	.word	0x58024800

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08c      	sub	sp, #48	; 0x30
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e3ff      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8087 	beq.w	8003416 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003308:	4b99      	ldr	r3, [pc, #612]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003312:	4b97      	ldr	r3, [pc, #604]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	2b10      	cmp	r3, #16
 800331c:	d007      	beq.n	800332e <HAL_RCC_OscConfig+0x46>
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	2b18      	cmp	r3, #24
 8003322:	d110      	bne.n	8003346 <HAL_RCC_OscConfig+0x5e>
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d10b      	bne.n	8003346 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332e:	4b90      	ldr	r3, [pc, #576]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d06c      	beq.n	8003414 <HAL_RCC_OscConfig+0x12c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d168      	bne.n	8003414 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e3d9      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x76>
 8003350:	4b87      	ldr	r3, [pc, #540]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a86      	ldr	r2, [pc, #536]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e02e      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x98>
 8003366:	4b82      	ldr	r3, [pc, #520]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a81      	ldr	r2, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b7f      	ldr	r3, [pc, #508]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7e      	ldr	r2, [pc, #504]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0xbc>
 800338a:	4b79      	ldr	r3, [pc, #484]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a78      	ldr	r2, [pc, #480]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xd4>
 80033a4:	4b72      	ldr	r3, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a71      	ldr	r2, [pc, #452]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b6f      	ldr	r3, [pc, #444]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a6e      	ldr	r2, [pc, #440]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd fe2e 	bl	8001024 <HAL_GetTick>
 80033c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fe2a 	bl	8001024 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e38d      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033de:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xe4>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe1a 	bl	8001024 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fe16 	bl	8001024 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e379      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x10c>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80ae 	beq.w	8003580 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003424:	4b52      	ldr	r3, [pc, #328]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800342c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800342e:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <HAL_RCC_OscConfig+0x162>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2b18      	cmp	r3, #24
 800343e:	d13a      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1ce>
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d135      	bne.n	80034b6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_RCC_OscConfig+0x17a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e34b      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003462:	f7fd fe0d 	bl	8001080 <HAL_GetREVID>
 8003466:	4602      	mov	r2, r0
 8003468:	f241 0303 	movw	r3, #4099	; 0x1003
 800346c:	429a      	cmp	r2, r3
 800346e:	d817      	bhi.n	80034a0 <HAL_RCC_OscConfig+0x1b8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d108      	bne.n	800348a <HAL_RCC_OscConfig+0x1a2>
 8003478:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003480:	4a3b      	ldr	r2, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003488:	e07a      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	031b      	lsls	r3, r3, #12
 8003498:	4935      	ldr	r1, [pc, #212]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800349e:	e06f      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a0:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	4930      	ldr	r1, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b4:	e064      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d045      	beq.n	800354a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034be:	4b2c      	ldr	r3, [pc, #176]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0219 	bic.w	r2, r3, #25
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4929      	ldr	r1, [pc, #164]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd fda8 	bl	8001024 <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fd fda4 	bl	8001024 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e307      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	f7fd fdc3 	bl	8001080 <HAL_GetREVID>
 80034fa:	4602      	mov	r2, r0
 80034fc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003500:	429a      	cmp	r2, r3
 8003502:	d817      	bhi.n	8003534 <HAL_RCC_OscConfig+0x24c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b40      	cmp	r3, #64	; 0x40
 800350a:	d108      	bne.n	800351e <HAL_RCC_OscConfig+0x236>
 800350c:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351a:	6053      	str	r3, [r2, #4]
 800351c:	e030      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
 800351e:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	4910      	ldr	r1, [pc, #64]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
 8003532:	e025      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	490b      	ldr	r1, [pc, #44]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
 8003548:	e01a      	b.n	8003580 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_RCC_OscConfig+0x288>)
 8003550:	f023 0301 	bic.w	r3, r3, #1
 8003554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fd fd65 	bl	8001024 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7fd fd61 	bl	8001024 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d903      	bls.n	8003574 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e2c4      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
 8003570:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003574:	4ba4      	ldr	r3, [pc, #656]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ee      	bne.n	800355e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a9 	beq.w	80036e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358e:	4b9e      	ldr	r3, [pc, #632]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003596:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003598:	4b9b      	ldr	r3, [pc, #620]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d007      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2cc>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b18      	cmp	r3, #24
 80035a8:	d13a      	bne.n	8003620 <HAL_RCC_OscConfig+0x338>
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d135      	bne.n	8003620 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035b4:	4b94      	ldr	r3, [pc, #592]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_OscConfig+0x2e4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e296      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035cc:	f7fd fd58 	bl	8001080 <HAL_GetREVID>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d817      	bhi.n	800360a <HAL_RCC_OscConfig+0x322>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d108      	bne.n	80035f4 <HAL_RCC_OscConfig+0x30c>
 80035e2:	4b89      	ldr	r3, [pc, #548]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80035ea:	4a87      	ldr	r2, [pc, #540]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80035ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035f0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035f2:	e075      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	069b      	lsls	r3, r3, #26
 8003602:	4981      	ldr	r1, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003608:	e06a      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	061b      	lsls	r3, r3, #24
 8003618:	497b      	ldr	r1, [pc, #492]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800361e:	e05f      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d042      	beq.n	80036ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003628:	4b77      	ldr	r3, [pc, #476]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a76      	ldr	r2, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800362e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fcf6 	bl	8001024 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800363c:	f7fd fcf2 	bl	8001024 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e255      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800364e:	4b6e      	ldr	r3, [pc, #440]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365a:	f7fd fd11 	bl	8001080 <HAL_GetREVID>
 800365e:	4602      	mov	r2, r0
 8003660:	f241 0303 	movw	r3, #4099	; 0x1003
 8003664:	429a      	cmp	r2, r3
 8003666:	d817      	bhi.n	8003698 <HAL_RCC_OscConfig+0x3b0>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	2b20      	cmp	r3, #32
 800366e:	d108      	bne.n	8003682 <HAL_RCC_OscConfig+0x39a>
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003678:	4a63      	ldr	r2, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800367a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800367e:	6053      	str	r3, [r2, #4]
 8003680:	e02e      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	069b      	lsls	r3, r3, #26
 8003690:	495d      	ldr	r1, [pc, #372]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
 8003696:	e023      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
 8003698:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4958      	ldr	r1, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fcb3 	bl	8001024 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036c2:	f7fd fcaf 	bl	8001024 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e212      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036d4:	4b4c      	ldr	r3, [pc, #304]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d036      	beq.n	800375a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f4:	4b44      	ldr	r3, [pc, #272]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f8:	4a43      	ldr	r2, [pc, #268]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fd fc90 	bl	8001024 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003708:	f7fd fc8c 	bl	8001024 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1ef      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800371c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x420>
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fd fc76 	bl	8001024 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373c:	f7fd fc72 	bl	8001024 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1d5      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800374e:	4b2e      	ldr	r3, [pc, #184]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800376e:	4b26      	ldr	r3, [pc, #152]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a25      	ldr	r2, [pc, #148]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003778:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800377a:	f7fd fc53 	bl	8001024 <HAL_GetTick>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003782:	f7fd fc4f 	bl	8001024 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1b2      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x49a>
 80037a0:	e018      	b.n	80037d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a18      	ldr	r2, [pc, #96]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80037a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fc39 	bl	8001024 <HAL_GetTick>
 80037b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037b6:	f7fd fc35 	bl	8001024 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e198      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_RCC_OscConfig+0x520>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f0      	bne.n	80037b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8085 	beq.w	80038ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_RCC_OscConfig+0x524>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a09      	ldr	r2, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x524>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ee:	f7fd fc19 	bl	8001024 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037f4:	e00c      	b.n	8003810 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fd fc15 	bl	8001024 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	; 0x64
 8003802:	d905      	bls.n	8003810 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e178      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
 8003808:	58024400 	.word	0x58024400
 800380c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003810:	4b96      	ldr	r3, [pc, #600]	; (8003a6c <HAL_RCC_OscConfig+0x784>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x54a>
 8003824:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a91      	ldr	r2, [pc, #580]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	e02d      	b.n	800388e <HAL_RCC_OscConfig+0x5a6>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x56c>
 800383a:	4b8d      	ldr	r3, [pc, #564]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a8c      	ldr	r2, [pc, #560]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b8a      	ldr	r3, [pc, #552]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a89      	ldr	r2, [pc, #548]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	e01c      	b.n	800388e <HAL_RCC_OscConfig+0x5a6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x58e>
 800385c:	4b84      	ldr	r3, [pc, #528]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a83      	ldr	r2, [pc, #524]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	4b81      	ldr	r3, [pc, #516]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a80      	ldr	r2, [pc, #512]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	e00b      	b.n	800388e <HAL_RCC_OscConfig+0x5a6>
 8003876:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a7d      	ldr	r2, [pc, #500]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	4b7b      	ldr	r3, [pc, #492]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a7a      	ldr	r2, [pc, #488]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d015      	beq.n	80038c2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fbc5 	bl	8001024 <HAL_GetTick>
 800389a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd fbc1 	bl	8001024 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e122      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b4:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ee      	beq.n	800389e <HAL_RCC_OscConfig+0x5b6>
 80038c0:	e014      	b.n	80038ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fbaf 	bl	8001024 <HAL_GetTick>
 80038c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fbab 	bl	8001024 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e10c      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038e0:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ee      	bne.n	80038ca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8101 	beq.w	8003af8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038f6:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fe:	2b18      	cmp	r3, #24
 8003900:	f000 80bc 	beq.w	8003a7c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b02      	cmp	r3, #2
 800390a:	f040 8095 	bne.w	8003a38 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd fb83 	bl	8001024 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fd fb7f 	bl	8001024 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0e2      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003934:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003944:	4b4b      	ldr	r3, [pc, #300]	; (8003a74 <HAL_RCC_OscConfig+0x78c>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	430a      	orrs	r2, r1
 8003954:	4946      	ldr	r1, [pc, #280]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003956:	4313      	orrs	r3, r2
 8003958:	628b      	str	r3, [r1, #40]	; 0x28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	3b01      	subs	r3, #1
 8003960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	3b01      	subs	r3, #1
 800396a:	025b      	lsls	r3, r3, #9
 800396c:	b29b      	uxth	r3, r3
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	3b01      	subs	r3, #1
 8003976:	041b      	lsls	r3, r3, #16
 8003978:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	3b01      	subs	r3, #1
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800398a:	4939      	ldr	r1, [pc, #228]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800398c:	4313      	orrs	r3, r2
 800398e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800399c:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 800399e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCC_OscConfig+0x790>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039a8:	00d2      	lsls	r2, r2, #3
 80039aa:	4931      	ldr	r1, [pc, #196]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	f023 020c 	bic.w	r2, r3, #12
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	492c      	ldr	r1, [pc, #176]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f023 0202 	bic.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	4928      	ldr	r1, [pc, #160]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039d4:	4b26      	ldr	r3, [pc, #152]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4a25      	ldr	r2, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fd fb08 	bl	8001024 <HAL_GetTick>
 8003a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fd fb04 	bl	8001024 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e067      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x730>
 8003a36:	e05f      	b.n	8003af8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd faee 	bl	8001024 <HAL_GetTick>
 8003a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd faea 	bl	8001024 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e04d      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_RCC_OscConfig+0x788>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x764>
 8003a6a:	e045      	b.n	8003af8 <HAL_RCC_OscConfig+0x810>
 8003a6c:	58024800 	.word	0x58024800
 8003a70:	58024400 	.word	0x58024400
 8003a74:	fffffc0c 	.word	0xfffffc0c
 8003a78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCC_OscConfig+0x81c>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_OscConfig+0x81c>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d031      	beq.n	8003af4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0203 	and.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d12a      	bne.n	8003af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d122      	bne.n	8003af4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d11a      	bne.n	8003af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d111      	bne.n	8003af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0c1b      	lsrs	r3, r3, #16
 8003ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3730      	adds	r7, #48	; 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400

08003b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e19c      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b8a      	ldr	r3, [pc, #552]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b87      	ldr	r3, [pc, #540]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	4985      	ldr	r1, [pc, #532]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b83      	ldr	r3, [pc, #524]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e184      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d908      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b68:	4b78      	ldr	r3, [pc, #480]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4975      	ldr	r1, [pc, #468]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d908      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b96:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	496a      	ldr	r1, [pc, #424]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b64      	ldr	r3, [pc, #400]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d908      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bc4:	4b61      	ldr	r3, [pc, #388]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	495e      	ldr	r1, [pc, #376]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	4b59      	ldr	r3, [pc, #356]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d908      	bls.n	8003c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bf2:	4b56      	ldr	r3, [pc, #344]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4953      	ldr	r1, [pc, #332]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d010      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	4b4d      	ldr	r3, [pc, #308]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d908      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	f023 020f 	bic.w	r2, r3, #15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4947      	ldr	r1, [pc, #284]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d055      	beq.n	8003cea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c3e:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4940      	ldr	r1, [pc, #256]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d107      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c58:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d121      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0f6      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c70:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d115      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0ea      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d107      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c88:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0de      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0d6      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ca8:	4b28      	ldr	r3, [pc, #160]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f023 0207 	bic.w	r2, r3, #7
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4925      	ldr	r1, [pc, #148]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd f9b3 	bl	8001024 <HAL_GetTick>
 8003cbe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc2:	f7fd f9af 	bl	8001024 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0be      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d1eb      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d208      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f023 020f 	bic.w	r2, r3, #15
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	490e      	ldr	r1, [pc, #56]	; (8003d4c <HAL_RCC_ClockConfig+0x244>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d214      	bcs.n	8003d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 020f 	bic.w	r2, r3, #15
 8003d2e:	4906      	ldr	r1, [pc, #24]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <HAL_RCC_ClockConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e086      	b.n	8003e56 <HAL_RCC_ClockConfig+0x34e>
 8003d48:	52002000 	.word	0x52002000
 8003d4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d208      	bcs.n	8003d7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d6c:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	4939      	ldr	r1, [pc, #228]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d208      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	492e      	ldr	r1, [pc, #184]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d010      	beq.n	8003dda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d208      	bcs.n	8003dda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003dc8:	4b25      	ldr	r3, [pc, #148]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4922      	ldr	r1, [pc, #136]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d010      	beq.n	8003e08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d208      	bcs.n	8003e08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003df6:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4917      	ldr	r1, [pc, #92]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e08:	f000 f834 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e0c:	4601      	mov	r1, r0
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x35c>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa21 f303 	lsr.w	r3, r1, r3
 8003e24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <HAL_RCC_ClockConfig+0x358>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a0d      	ldr	r2, [pc, #52]	; (8003e64 <HAL_RCC_ClockConfig+0x35c>)
 8003e30:	5cd3      	ldrb	r3, [r2, r3]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x360>)
 8003e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x364>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x368>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f8a0 	bl	8000f90 <HAL_InitTick>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
 8003e64:	0800a444 	.word	0x0800a444
 8003e68:	24000004 	.word	0x24000004
 8003e6c:	24000000 	.word	0x24000000
 8003e70:	24000008 	.word	0x24000008

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7a:	4baf      	ldr	r3, [pc, #700]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e82:	2b18      	cmp	r3, #24
 8003e84:	f200 814e 	bhi.w	8004124 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08004125 	.word	0x08004125
 8003e98:	08004125 	.word	0x08004125
 8003e9c:	08004125 	.word	0x08004125
 8003ea0:	08004125 	.word	0x08004125
 8003ea4:	08004125 	.word	0x08004125
 8003ea8:	08004125 	.word	0x08004125
 8003eac:	08004125 	.word	0x08004125
 8003eb0:	08003f1b 	.word	0x08003f1b
 8003eb4:	08004125 	.word	0x08004125
 8003eb8:	08004125 	.word	0x08004125
 8003ebc:	08004125 	.word	0x08004125
 8003ec0:	08004125 	.word	0x08004125
 8003ec4:	08004125 	.word	0x08004125
 8003ec8:	08004125 	.word	0x08004125
 8003ecc:	08004125 	.word	0x08004125
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08004125 	.word	0x08004125
 8003ed8:	08004125 	.word	0x08004125
 8003edc:	08004125 	.word	0x08004125
 8003ee0:	08004125 	.word	0x08004125
 8003ee4:	08004125 	.word	0x08004125
 8003ee8:	08004125 	.word	0x08004125
 8003eec:	08004125 	.word	0x08004125
 8003ef0:	08003f27 	.word	0x08003f27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef4:	4b90      	ldr	r3, [pc, #576]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	08db      	lsrs	r3, r3, #3
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	4a8c      	ldr	r2, [pc, #560]	; (800413c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003f12:	e10a      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003f14:	4b89      	ldr	r3, [pc, #548]	; (800413c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003f16:	61bb      	str	r3, [r7, #24]
    break;
 8003f18:	e107      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003f1a:	4b89      	ldr	r3, [pc, #548]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003f1c:	61bb      	str	r3, [r7, #24]
    break;
 8003f1e:	e104      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003f20:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003f22:	61bb      	str	r3, [r7, #24]
    break;
 8003f24:	e101      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f30:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f3c:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f46:	4b7c      	ldr	r3, [pc, #496]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4a:	08db      	lsrs	r3, r3, #3
 8003f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80da 	beq.w	800411e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d05a      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d302      	bcc.n	8003f7a <HAL_RCC_GetSysClockFreq+0x106>
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d078      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003f78:	e099      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f7a:	4b6f      	ldr	r3, [pc, #444]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d02d      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f86:	4b6c      	ldr	r3, [pc, #432]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	08db      	lsrs	r3, r3, #3
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	ee07 3a90 	vmov	s15, r3
 8003fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fc4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003fc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fdc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003fe0:	e087      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fec:	eddf 6a57 	vldr	s13, [pc, #348]	; 800414c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003ff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ff4:	4b50      	ldr	r3, [pc, #320]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ffc:	ee07 3a90 	vmov	s15, r3
 8004000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004004:	ed97 6a02 	vldr	s12, [r7, #8]
 8004008:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2d4>
 800400c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800401c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004020:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004024:	e065      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004030:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004048:	ed97 6a02 	vldr	s12, [r7, #8]
 800404c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800405c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004064:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004068:	e043      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004074:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004154 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004090:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ac:	e021      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004150 <HAL_RCC_GetSysClockFreq+0x2dc>
 80040bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004148 <HAL_RCC_GetSysClockFreq+0x2d4>
 80040d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040f0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	0a5b      	lsrs	r3, r3, #9
 80040f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fc:	3301      	adds	r3, #1
 80040fe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800410a:	edd7 6a07 	vldr	s13, [r7, #28]
 800410e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 3a90 	vmov	r3, s15
 800411a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800411c:	e005      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
    break;
 8004122:	e002      	b.n	800412a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004126:	61bb      	str	r3, [r7, #24]
    break;
 8004128:	bf00      	nop
  }

  return sysclockfreq;
 800412a:	69bb      	ldr	r3, [r7, #24]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3724      	adds	r7, #36	; 0x24
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	58024400 	.word	0x58024400
 800413c:	03d09000 	.word	0x03d09000
 8004140:	003d0900 	.word	0x003d0900
 8004144:	007a1200 	.word	0x007a1200
 8004148:	46000000 	.word	0x46000000
 800414c:	4c742400 	.word	0x4c742400
 8004150:	4a742400 	.word	0x4a742400
 8004154:	4af42400 	.word	0x4af42400

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800415e:	f7ff fe89 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8004162:	4601      	mov	r1, r0
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	fa21 f303 	lsr.w	r3, r1, r3
 800417a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004194:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	58024400 	.word	0x58024400
 80041ac:	0800a444 	.word	0x0800a444
 80041b0:	24000004 	.word	0x24000004
 80041b4:	24000000 	.word	0x24000000

080041b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041bc:	f7ff ffcc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041c0:	4601      	mov	r1, r0
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	091b      	lsrs	r3, r3, #4
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ce:	5cd3      	ldrb	r3, [r2, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	58024400 	.word	0x58024400
 80041e0:	0800a444 	.word	0x0800a444

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041e8:	f7ff ffb6 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041ec:	4601      	mov	r1, r0
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <HAL_RCC_GetPCLK2Freq+0x28>)
 80041fa:	5cd3      	ldrb	r3, [r2, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	58024400 	.word	0x58024400
 800420c:	0800a444 	.word	0x0800a444

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004218:	2300      	movs	r3, #0
 800421a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800421c:	2300      	movs	r3, #0
 800421e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d03d      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004234:	d013      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d802      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004240:	e01f      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004246:	d013      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800424c:	d01c      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800424e:	e018      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004250:	4baf      	ldr	r3, [pc, #700]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4aae      	ldr	r2, [pc, #696]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800425c:	e015      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	2102      	movs	r1, #2
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f96f 	bl	8005548 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800426e:	e00c      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3324      	adds	r3, #36	; 0x24
 8004274:	2102      	movs	r1, #2
 8004276:	4618      	mov	r0, r3
 8004278:	f001 fa18 	bl	80056ac <RCCEx_PLL3_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004280:	e003      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	75fb      	strb	r3, [r7, #23]
      break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004290:	4b9f      	ldr	r3, [pc, #636]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429c:	499c      	ldr	r1, [pc, #624]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	650b      	str	r3, [r1, #80]	; 0x50
 80042a2:	e001      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d03d      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d826      	bhi.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042d9 	.word	0x080042d9
 80042c8:	080042e7 	.word	0x080042e7
 80042cc:	080042f9 	.word	0x080042f9
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4a8c      	ldr	r2, [pc, #560]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042e4:	e015      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f92b 	bl	8005548 <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042f6:	e00c      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 f9d4 	bl	80056ac <RCCEx_PLL3_Config>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	75fb      	strb	r3, [r7, #23]
      break;
 800430e:	e000      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004312:	7dfb      	ldrb	r3, [r7, #23]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004318:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800431a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431c:	f023 0207 	bic.w	r2, r3, #7
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	497a      	ldr	r1, [pc, #488]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004326:	4313      	orrs	r3, r2
 8004328:	650b      	str	r3, [r1, #80]	; 0x50
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d03e      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	2b80      	cmp	r3, #128	; 0x80
 8004342:	d01c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d804      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d00d      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004350:	e01e      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004352:	2bc0      	cmp	r3, #192	; 0xc0
 8004354:	d01f      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435a:	d01e      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800435c:	e018      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800435e:	4b6c      	ldr	r3, [pc, #432]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	4a6b      	ldr	r2, [pc, #428]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800436a:	e017      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f8e8 	bl	8005548 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800437c:	e00e      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f991 	bl	80056ac <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800438e:	e005      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e002      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004396:	bf00      	nop
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800439a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043a2:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	4958      	ldr	r1, [pc, #352]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	650b      	str	r3, [r1, #80]	; 0x50
 80043b4:	e001      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d044      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d0:	d01f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d805      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80043dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e0:	d00e      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80043e2:	e01f      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80043e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043e8:	d01f      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80043ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ee:	d01e      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80043f0:	e018      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a46      	ldr	r2, [pc, #280]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043fe:	e017      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f89e 	bl	8005548 <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004410:	e00e      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3324      	adds	r3, #36	; 0x24
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f947 	bl	80056ac <RCCEx_PLL3_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004422:	e005      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	75fb      	strb	r3, [r7, #23]
      break;
 8004428:	e002      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800442e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004436:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004444:	4932      	ldr	r1, [pc, #200]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004446:	4313      	orrs	r3, r2
 8004448:	658b      	str	r3, [r1, #88]	; 0x58
 800444a:	e001      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004458:	2b00      	cmp	r3, #0
 800445a:	d044      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004466:	d01f      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800446c:	d805      	bhi.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004476:	d00e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004478:	e01f      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800447a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800447e:	d01f      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004484:	d01e      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004486:	e018      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a20      	ldr	r2, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004494:	e017      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3304      	adds	r3, #4
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f853 	bl	8005548 <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044a6:	e00e      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3324      	adds	r3, #36	; 0x24
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 f8fc 	bl	80056ac <RCCEx_PLL3_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
      break;
 80044be:	e002      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80044c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044cc:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044da:	490d      	ldr	r1, [pc, #52]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	658b      	str	r3, [r1, #88]	; 0x58
 80044e0:	e001      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d035      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d00c      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d802      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01b      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004502:	e017      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004504:	2b20      	cmp	r3, #32
 8004506:	d00c      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004508:	2b30      	cmp	r3, #48	; 0x30
 800450a:	d018      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800450c:	e012      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004514:	4baf      	ldr	r3, [pc, #700]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	4aae      	ldr	r2, [pc, #696]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800451a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004520:	e00e      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	2102      	movs	r1, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f001 f80d 	bl	8005548 <RCCEx_PLL2_Config>
 800452e:	4603      	mov	r3, r0
 8004530:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004532:	e005      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	75fb      	strb	r3, [r7, #23]
      break;
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800453e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004546:	4ba3      	ldr	r3, [pc, #652]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	49a0      	ldr	r1, [pc, #640]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004554:	4313      	orrs	r3, r2
 8004556:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004558:	e001      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d042      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004572:	d01f      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004578:	d805      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d00e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004584:	e01f      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004586:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800458a:	d01f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800458c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004590:	d01e      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004592:	e018      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004594:	4b8f      	ldr	r3, [pc, #572]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4a8e      	ldr	r2, [pc, #568]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800459a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045a0:	e017      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 ffcd 	bl	8005548 <RCCEx_PLL2_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045b2:	e00e      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	2100      	movs	r1, #0
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f876 	bl	80056ac <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045c4:	e005      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80045cc:	bf00      	nop
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80045d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045d8:	4b7e      	ldr	r3, [pc, #504]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	497b      	ldr	r1, [pc, #492]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	650b      	str	r3, [r1, #80]	; 0x50
 80045ea:	e001      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
 80045ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d042      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004604:	d01b      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460a:	d805      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004616:	e01b      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800461c:	d01d      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800461e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004622:	d01c      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004628:	d01b      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800462a:	e011      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3304      	adds	r3, #4
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f000 ff88 	bl	8005548 <RCCEx_PLL2_Config>
 8004638:	4603      	mov	r3, r0
 800463a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800463c:	e012      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3324      	adds	r3, #36	; 0x24
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f831 	bl	80056ac <RCCEx_PLL3_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800464e:	e009      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
      break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004656:	bf00      	nop
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800466a:	4b5a      	ldr	r3, [pc, #360]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004676:	4957      	ldr	r1, [pc, #348]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	650b      	str	r3, [r1, #80]	; 0x50
 800467c:	e001      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d044      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004698:	d01b      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800469a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469e:	d805      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d022      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80046a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046a8:	d00a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80046aa:	e01b      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80046ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b0:	d01d      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80046b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b6:	d01c      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80046b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046bc:	d01b      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80046be:	e011      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	2101      	movs	r1, #1
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 ff3e 	bl	8005548 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046d0:	e012      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3324      	adds	r3, #36	; 0x24
 80046d6:	2101      	movs	r1, #1
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 ffe7 	bl	80056ac <RCCEx_PLL3_Config>
 80046de:	4603      	mov	r3, r0
 80046e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80046e2:	e009      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
      break;
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80046ea:	bf00      	nop
 80046ec:	e004      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80046f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046fe:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800470c:	4931      	ldr	r1, [pc, #196]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	658b      	str	r3, [r1, #88]	; 0x58
 8004712:	e001      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004728:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800472c:	d005      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800472e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004732:	d009      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004738:	e00f      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	4a25      	ldr	r2, [pc, #148]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3304      	adds	r3, #4
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fefa 	bl	8005548 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
      break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004774:	4917      	ldr	r1, [pc, #92]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	650b      	str	r3, [r1, #80]	; 0x50
 800477a:	e001      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d035      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	2b03      	cmp	r3, #3
 8004792:	d81b      	bhi.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047ad 	.word	0x080047ad
 80047a4:	080047bb 	.word	0x080047bb
 80047a8:	080047d9 	.word	0x080047d9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	2102      	movs	r1, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 fec1 	bl	8005548 <RCCEx_PLL2_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047ca:	e006      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	75fb      	strb	r3, [r7, #23]
      break;
 80047d0:	e003      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
      break;
 80047d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047da:	7dfb      	ldrb	r3, [r7, #23]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d109      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80047e0:	4bba      	ldr	r3, [pc, #744]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e4:	f023 0203 	bic.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	49b7      	ldr	r1, [pc, #732]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80047f2:	e001      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8086 	beq.w	8004912 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004806:	4bb2      	ldr	r3, [pc, #712]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4ab1      	ldr	r2, [pc, #708]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004812:	f7fc fc07 	bl	8001024 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004818:	e009      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fc fc03 	bl	8001024 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b64      	cmp	r3, #100	; 0x64
 8004826:	d902      	bls.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	75fb      	strb	r3, [r7, #23]
        break;
 800482c:	e005      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800482e:	4ba8      	ldr	r3, [pc, #672]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0ef      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d166      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004840:	4ba2      	ldr	r3, [pc, #648]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004842:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800484a:	4053      	eors	r3, r2
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004854:	4b9d      	ldr	r3, [pc, #628]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800485e:	4b9b      	ldr	r3, [pc, #620]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a9a      	ldr	r2, [pc, #616]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800486a:	4b98      	ldr	r3, [pc, #608]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a97      	ldr	r2, [pc, #604]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004876:	4a95      	ldr	r2, [pc, #596]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004886:	d115      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fc fbcc 	bl	8001024 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800488e:	e00b      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fc fbc8 	bl	8001024 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d902      	bls.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	75fb      	strb	r3, [r7, #23]
            break;
 80048a6:	e005      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048a8:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0ed      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d126      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c8:	d10d      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80048ca:	4b80      	ldr	r3, [pc, #512]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048d8:	0919      	lsrs	r1, r3, #4
 80048da:	4b7e      	ldr	r3, [pc, #504]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80048dc:	400b      	ands	r3, r1
 80048de:	497b      	ldr	r1, [pc, #492]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	610b      	str	r3, [r1, #16]
 80048e4:	e005      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80048e6:	4b79      	ldr	r3, [pc, #484]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	4a78      	ldr	r2, [pc, #480]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80048f0:	6113      	str	r3, [r2, #16]
 80048f2:	4b76      	ldr	r3, [pc, #472]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004900:	4972      	ldr	r1, [pc, #456]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	670b      	str	r3, [r1, #112]	; 0x70
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	75bb      	strb	r3, [r7, #22]
 800490c:	e001      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d07d      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004922:	2b28      	cmp	r3, #40	; 0x28
 8004924:	d866      	bhi.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004926:	a201      	add	r2, pc, #4	; (adr r2, 800492c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492c:	080049fb 	.word	0x080049fb
 8004930:	080049f5 	.word	0x080049f5
 8004934:	080049f5 	.word	0x080049f5
 8004938:	080049f5 	.word	0x080049f5
 800493c:	080049f5 	.word	0x080049f5
 8004940:	080049f5 	.word	0x080049f5
 8004944:	080049f5 	.word	0x080049f5
 8004948:	080049f5 	.word	0x080049f5
 800494c:	080049d1 	.word	0x080049d1
 8004950:	080049f5 	.word	0x080049f5
 8004954:	080049f5 	.word	0x080049f5
 8004958:	080049f5 	.word	0x080049f5
 800495c:	080049f5 	.word	0x080049f5
 8004960:	080049f5 	.word	0x080049f5
 8004964:	080049f5 	.word	0x080049f5
 8004968:	080049f5 	.word	0x080049f5
 800496c:	080049e3 	.word	0x080049e3
 8004970:	080049f5 	.word	0x080049f5
 8004974:	080049f5 	.word	0x080049f5
 8004978:	080049f5 	.word	0x080049f5
 800497c:	080049f5 	.word	0x080049f5
 8004980:	080049f5 	.word	0x080049f5
 8004984:	080049f5 	.word	0x080049f5
 8004988:	080049f5 	.word	0x080049f5
 800498c:	080049fb 	.word	0x080049fb
 8004990:	080049f5 	.word	0x080049f5
 8004994:	080049f5 	.word	0x080049f5
 8004998:	080049f5 	.word	0x080049f5
 800499c:	080049f5 	.word	0x080049f5
 80049a0:	080049f5 	.word	0x080049f5
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	080049f5 	.word	0x080049f5
 80049ac:	080049fb 	.word	0x080049fb
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049f5 	.word	0x080049f5
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	080049fb 	.word	0x080049fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fdb6 	bl	8005548 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049e0:	e00c      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3324      	adds	r3, #36	; 0x24
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe5f 	bl	80056ac <RCCEx_PLL3_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80049f2:	e003      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80049fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a02:	4b32      	ldr	r3, [pc, #200]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0e:	492f      	ldr	r1, [pc, #188]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	654b      	str	r3, [r1, #84]	; 0x54
 8004a14:	e001      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d037      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d820      	bhi.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a77 	.word	0x08004a77
 8004a38:	08004a4d 	.word	0x08004a4d
 8004a3c:	08004a5f 	.word	0x08004a5f
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	2101      	movs	r1, #1
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fd78 	bl	8005548 <RCCEx_PLL2_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a5c:	e00c      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3324      	adds	r3, #36	; 0x24
 8004a62:	2101      	movs	r1, #1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fe21 	bl	80056ac <RCCEx_PLL3_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f023 0207 	bic.w	r2, r3, #7
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8a:	4910      	ldr	r1, [pc, #64]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d040      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d827      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004b03 	.word	0x08004b03
 8004ab8:	08004ad9 	.word	0x08004ad9
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004b03 	.word	0x08004b03
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004b03 	.word	0x08004b03
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	58024800 	.word	0x58024800
 8004ad4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd32 	bl	8005548 <RCCEx_PLL2_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e00c      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fddb 	bl	80056ac <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0a:	4bb2      	ldr	r3, [pc, #712]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f023 0207 	bic.w	r2, r3, #7
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	49ae      	ldr	r1, [pc, #696]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b1e:	e001      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d044      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3a:	d01b      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b40:	d805      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d022      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004b4c:	e01b      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b52:	d01d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b58:	d01c      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b5e:	d01b      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004b60:	e011      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fced 	bl	8005548 <RCCEx_PLL2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b72:	e012      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	2102      	movs	r1, #2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fd96 	bl	80056ac <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004b84:	e009      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8a:	e006      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004b8c:	bf00      	nop
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004b90:	bf00      	nop
 8004b92:	e002      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004b94:	bf00      	nop
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004b98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ba0:	4b8c      	ldr	r3, [pc, #560]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bae:	4989      	ldr	r1, [pc, #548]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	654b      	str	r3, [r1, #84]	; 0x54
 8004bb4:	e001      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d044      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd0:	d01b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd6:	d805      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d022      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004be2:	e01b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d01d      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004bea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004bee:	d01c      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bf4:	d01b      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004bf6:	e011      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fca2 	bl	8005548 <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c08:	e012      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fd4b 	bl	80056ac <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c1a:	e009      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004c22:	bf00      	nop
 8004c24:	e004      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c36:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c44:	4963      	ldr	r1, [pc, #396]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	658b      	str	r3, [r1, #88]	; 0x58
 8004c4a:	e001      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d044      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c66:	d01b      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6c:	d805      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d022      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d00a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004c78:	e01b      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d01d      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004c80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004c84:	d01c      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004c86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004c8c:	e011      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fc57 	bl	8005548 <RCCEx_PLL2_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004c9e:	e012      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3324      	adds	r3, #36	; 0x24
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd00 	bl	80056ac <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004cb0:	e009      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cb6:	e006      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004cb8:	bf00      	nop
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ccc:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cda:	493e      	ldr	r1, [pc, #248]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	658b      	str	r3, [r1, #88]	; 0x58
 8004ce0:	e001      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3324      	adds	r3, #36	; 0x24
 8004d02:	2102      	movs	r1, #2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fcd1 	bl	80056ac <RCCEx_PLL3_Config>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d14:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d22:	492c      	ldr	r1, [pc, #176]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01a      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	d10a      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3324      	adds	r3, #36	; 0x24
 8004d44:	2102      	movs	r1, #2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fcb0 	bl	80056ac <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d56:	4b1f      	ldr	r3, [pc, #124]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d64:	491b      	ldr	r1, [pc, #108]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d032      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d00d      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8004d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d86:	d016      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d111      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	2100      	movs	r1, #0
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fbd8 	bl	8005548 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004d9c:	e00c      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	2102      	movs	r1, #2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fc81 	bl	80056ac <RCCEx_PLL3_Config>
 8004daa:	4603      	mov	r3, r0
 8004dac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004dae:	e003      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	75fb      	strb	r3, [r7, #23]
      break;
 8004db4:	e000      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db8:	7dfb      	ldrb	r3, [r7, #23]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dcc:	4901      	ldr	r1, [pc, #4]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	658b      	str	r3, [r1, #88]	; 0x58
 8004dd2:	e003      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d02f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df2:	d00c      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004df4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004df8:	d015      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfe:	d10f      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e00:	4b79      	ldr	r3, [pc, #484]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a78      	ldr	r2, [pc, #480]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e0c:	e00c      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3324      	adds	r3, #36	; 0x24
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fc49 	bl	80056ac <RCCEx_PLL3_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e1e:	e003      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
      break;
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2e:	4b6e      	ldr	r3, [pc, #440]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3c:	496a      	ldr	r1, [pc, #424]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	654b      	str	r3, [r1, #84]	; 0x54
 8004e42:	e001      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d029      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d007      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004e62:	e00f      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e64:	4b60      	ldr	r3, [pc, #384]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4a5f      	ldr	r2, [pc, #380]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e70:	e00b      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	2102      	movs	r1, #2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb65 	bl	8005548 <RCCEx_PLL2_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004e82:	e002      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
      break;
 8004e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e90:	4b55      	ldr	r3, [pc, #340]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9c:	4952      	ldr	r1, [pc, #328]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ea2:	e001      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3324      	adds	r3, #36	; 0x24
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fbf6 	bl	80056ac <RCCEx_PLL3_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ede:	d00c      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee4:	d802      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d011      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004eea:	e00d      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef0:	d00f      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ef6:	d00e      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004ef8:	e006      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004efa:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	4a3a      	ldr	r2, [pc, #232]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f06:	e007      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0c:	e004      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f1e:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f2a:	492f      	ldr	r1, [pc, #188]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	654b      	str	r3, [r1, #84]	; 0x54
 8004f30:	e001      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f42:	4b29      	ldr	r3, [pc, #164]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4926      	ldr	r1, [pc, #152]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f60:	4b21      	ldr	r3, [pc, #132]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f6e:	491e      	ldr	r1, [pc, #120]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	4a11      	ldr	r2, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fa8:	6113      	str	r3, [r2, #16]
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004fb4:	490c      	ldr	r1, [pc, #48]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da08      	bge.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004fc2:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	4906      	ldr	r1, [pc, #24]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004fd4:	7dbb      	ldrb	r3, [r7, #22]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400

08004fec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ff0:	f7ff f8b2 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}
 8005010:	58024400 	.word	0x58024400
 8005014:	0800a444 	.word	0x0800a444

08005018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005020:	4b9d      	ldr	r3, [pc, #628]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800502a:	4b9b      	ldr	r3, [pc, #620]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	0b1b      	lsrs	r3, r3, #12
 8005030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005036:	4b98      	ldr	r3, [pc, #608]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005042:	4b95      	ldr	r3, [pc, #596]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 810a 	beq.w	800527a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d05a      	beq.n	8005122 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800506c:	2b01      	cmp	r3, #1
 800506e:	d302      	bcc.n	8005076 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005070:	2b02      	cmp	r3, #2
 8005072:	d078      	beq.n	8005166 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005074:	e099      	b.n	80051aa <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005076:	4b88      	ldr	r3, [pc, #544]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02d      	beq.n	80050de <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005082:	4b85      	ldr	r3, [pc, #532]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	08db      	lsrs	r3, r3, #3
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	4a83      	ldr	r2, [pc, #524]	; (800529c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ac:	4b7a      	ldr	r3, [pc, #488]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	ee07 3a90 	vmov	s15, r3
 80050b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80050c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050dc:	e087      	b.n	80051ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	ee07 3a90 	vmov	s15, r3
 80050e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80052a4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80050ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f0:	4b69      	ldr	r3, [pc, #420]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005100:	ed97 6a03 	vldr	s12, [r7, #12]
 8005104:	eddf 5a66 	vldr	s11, [pc, #408]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005120:	e065      	b.n	80051ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005134:	4b58      	ldr	r3, [pc, #352]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005144:	ed97 6a03 	vldr	s12, [r7, #12]
 8005148:	eddf 5a55 	vldr	s11, [pc, #340]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800514c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005164:	e043      	b.n	80051ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	ee07 3a90 	vmov	s15, r3
 800516c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005170:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005178:	4b47      	ldr	r3, [pc, #284]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005180:	ee07 3a90 	vmov	s15, r3
 8005184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005188:	ed97 6a03 	vldr	s12, [r7, #12]
 800518c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051a8:	e021      	b.n	80051ee <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	ee07 3a90 	vmov	s15, r3
 80051b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80051b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051bc:	4b36      	ldr	r3, [pc, #216]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	ee07 3a90 	vmov	s15, r3
 80051c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80052a0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80051d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ec:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80051ee:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f8:	ee07 3a90 	vmov	s15, r3
 80051fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005208:	edd7 6a07 	vldr	s13, [r7, #28]
 800520c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005214:	ee17 2a90 	vmov	r2, s15
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	0e1b      	lsrs	r3, r3, #24
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005264:	edd7 6a07 	vldr	s13, [r7, #28]
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 2a90 	vmov	r2, s15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005278:	e008      	b.n	800528c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	3724      	adds	r7, #36	; 0x24
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	58024400 	.word	0x58024400
 800529c:	03d09000 	.word	0x03d09000
 80052a0:	46000000 	.word	0x46000000
 80052a4:	4c742400 	.word	0x4c742400
 80052a8:	4a742400 	.word	0x4a742400
 80052ac:	4af42400 	.word	0x4af42400

080052b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b8:	4b9d      	ldr	r3, [pc, #628]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052c2:	4b9b      	ldr	r3, [pc, #620]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	0d1b      	lsrs	r3, r3, #20
 80052c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ce:	4b98      	ldr	r3, [pc, #608]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052da:	4b95      	ldr	r3, [pc, #596]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 810a 	beq.w	8005512 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d05a      	beq.n	80053ba <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d302      	bcc.n	800530e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005308:	2b02      	cmp	r3, #2
 800530a:	d078      	beq.n	80053fe <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800530c:	e099      	b.n	8005442 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530e:	4b88      	ldr	r3, [pc, #544]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02d      	beq.n	8005376 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800531a:	4b85      	ldr	r3, [pc, #532]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	08db      	lsrs	r3, r3, #3
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	4a83      	ldr	r2, [pc, #524]	; (8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005344:	4b7a      	ldr	r3, [pc, #488]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005354:	ed97 6a03 	vldr	s12, [r7, #12]
 8005358:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800535c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005370:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005374:	e087      	b.n	8005486 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005380:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005388:	4b69      	ldr	r3, [pc, #420]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005398:	ed97 6a03 	vldr	s12, [r7, #12]
 800539c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80053a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b8:	e065      	b.n	8005486 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80053c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053cc:	4b58      	ldr	r3, [pc, #352]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80053e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80053e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053fc:	e043      	b.n	8005486 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005408:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800540c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005410:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005420:	ed97 6a03 	vldr	s12, [r7, #12]
 8005424:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005440:	e021      	b.n	8005486 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005540 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005454:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005464:	ed97 6a03 	vldr	s12, [r7, #12]
 8005468:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800546c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005484:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005486:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	0a5b      	lsrs	r3, r3, #9
 800548c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ac:	ee17 2a90 	vmov	r2, s15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054b4:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054da:	ee17 2a90 	vmov	r2, s15
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80054e2:	4b13      	ldr	r3, [pc, #76]	; (8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	0e1b      	lsrs	r3, r3, #24
 80054e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005508:	ee17 2a90 	vmov	r2, s15
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005510:	e008      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	3724      	adds	r7, #36	; 0x24
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	58024400 	.word	0x58024400
 8005534:	03d09000 	.word	0x03d09000
 8005538:	46000000 	.word	0x46000000
 800553c:	4c742400 	.word	0x4c742400
 8005540:	4a742400 	.word	0x4a742400
 8005544:	4af42400 	.word	0x4af42400

08005548 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005556:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d101      	bne.n	8005566 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e099      	b.n	800569a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005566:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a4e      	ldr	r2, [pc, #312]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800556c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005572:	f7fb fd57 	bl	8001024 <HAL_GetTick>
 8005576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005578:	e008      	b.n	800558c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800557a:	f7fb fd53 	bl	8001024 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e086      	b.n	800569a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800558c:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f0      	bne.n	800557a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005598:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	031b      	lsls	r3, r3, #12
 80055a6:	493f      	ldr	r1, [pc, #252]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	628b      	str	r3, [r1, #40]	; 0x28
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	025b      	lsls	r3, r3, #9
 80055be:	b29b      	uxth	r3, r3
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	061b      	lsls	r3, r3, #24
 80055d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055dc:	4931      	ldr	r1, [pc, #196]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055e2:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	492d      	ldr	r1, [pc, #180]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055f4:	4b2b      	ldr	r3, [pc, #172]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	f023 0220 	bic.w	r2, r3, #32
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	4928      	ldr	r1, [pc, #160]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005606:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800560c:	f023 0310 	bic.w	r3, r3, #16
 8005610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005616:	4b24      	ldr	r3, [pc, #144]	; (80056a8 <RCCEx_PLL2_Config+0x160>)
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	69d2      	ldr	r2, [r2, #28]
 800561e:	00d2      	lsls	r2, r2, #3
 8005620:	4920      	ldr	r1, [pc, #128]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005626:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800562c:	f043 0310 	orr.w	r3, r3, #16
 8005630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005638:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800563e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005644:	e00f      	b.n	8005666 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800564c:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	4a14      	ldr	r2, [pc, #80]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005656:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005658:	e005      	b.n	8005666 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800565a:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a0e      	ldr	r2, [pc, #56]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005672:	f7fb fcd7 	bl	8001024 <HAL_GetTick>
 8005676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005678:	e008      	b.n	800568c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800567a:	f7fb fcd3 	bl	8001024 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e006      	b.n	800569a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800568c:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <RCCEx_PLL2_Config+0x15c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	58024400 	.word	0x58024400
 80056a8:	ffff0007 	.word	0xffff0007

080056ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056ba:	4b53      	ldr	r3, [pc, #332]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d101      	bne.n	80056ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e099      	b.n	80057fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056ca:	4b4f      	ldr	r3, [pc, #316]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a4e      	ldr	r2, [pc, #312]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d6:	f7fb fca5 	bl	8001024 <HAL_GetTick>
 80056da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056de:	f7fb fca1 	bl	8001024 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e086      	b.n	80057fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056fc:	4b42      	ldr	r3, [pc, #264]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	051b      	lsls	r3, r3, #20
 800570a:	493f      	ldr	r1, [pc, #252]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 800570c:	4313      	orrs	r3, r2
 800570e:	628b      	str	r3, [r1, #40]	; 0x28
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	3b01      	subs	r3, #1
 8005716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	3b01      	subs	r3, #1
 8005720:	025b      	lsls	r3, r3, #9
 8005722:	b29b      	uxth	r3, r3
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	3b01      	subs	r3, #1
 800572c:	041b      	lsls	r3, r3, #16
 800572e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	3b01      	subs	r3, #1
 800573a:	061b      	lsls	r3, r3, #24
 800573c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005740:	4931      	ldr	r1, [pc, #196]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005742:	4313      	orrs	r3, r2
 8005744:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005746:	4b30      	ldr	r3, [pc, #192]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	492d      	ldr	r1, [pc, #180]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	4928      	ldr	r1, [pc, #160]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005766:	4313      	orrs	r3, r2
 8005768:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800576a:	4b27      	ldr	r3, [pc, #156]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	4a26      	ldr	r2, [pc, #152]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <RCCEx_PLL3_Config+0x160>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	69d2      	ldr	r2, [r2, #28]
 8005782:	00d2      	lsls	r2, r2, #3
 8005784:	4920      	ldr	r1, [pc, #128]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 8005790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800579c:	4b1a      	ldr	r3, [pc, #104]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057a8:	e00f      	b.n	80057ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d106      	bne.n	80057be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a14      	ldr	r2, [pc, #80]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057bc:	e005      	b.n	80057ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c2:	4a11      	ldr	r2, [pc, #68]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057ca:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d6:	f7fb fc25 	bl	8001024 <HAL_GetTick>
 80057da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057dc:	e008      	b.n	80057f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057de:	f7fb fc21 	bl	8001024 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0f0      	beq.n	80057de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	58024400 	.word	0x58024400
 800580c:	ffff0007 	.word	0xffff0007

08005810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e042      	b.n	80058a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fb fafb 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2224      	movs	r2, #36	; 0x24
 800583e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f82c 	bl	80058b0 <UART_SetConfig>
 8005858:	4603      	mov	r3, r0
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e022      	b.n	80058a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fdd0 	bl	8006410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800587e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800588e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fe57 	bl	8006554 <UART_CheckIdleState>
 80058a6:	4603      	mov	r3, r0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80058b4:	b08e      	sub	sp, #56	; 0x38
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058de:	4313      	orrs	r3, r2
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	4bc1      	ldr	r3, [pc, #772]	; (8005bf0 <UART_SetConfig+0x340>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058f2:	430b      	orrs	r3, r1
 80058f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4ab7      	ldr	r2, [pc, #732]	; (8005bf4 <UART_SetConfig+0x344>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005922:	4313      	orrs	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	4bb2      	ldr	r3, [pc, #712]	; (8005bf8 <UART_SetConfig+0x348>)
 800592e:	4013      	ands	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005936:	430b      	orrs	r3, r1
 8005938:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	f023 010f 	bic.w	r1, r3, #15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4aa9      	ldr	r2, [pc, #676]	; (8005bfc <UART_SetConfig+0x34c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d177      	bne.n	8005a4a <UART_SetConfig+0x19a>
 800595a:	4ba9      	ldr	r3, [pc, #676]	; (8005c00 <UART_SetConfig+0x350>)
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005962:	2b28      	cmp	r3, #40	; 0x28
 8005964:	d86c      	bhi.n	8005a40 <UART_SetConfig+0x190>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0xbc>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a41 	.word	0x08005a41
 8005974:	08005a41 	.word	0x08005a41
 8005978:	08005a41 	.word	0x08005a41
 800597c:	08005a41 	.word	0x08005a41
 8005980:	08005a41 	.word	0x08005a41
 8005984:	08005a41 	.word	0x08005a41
 8005988:	08005a41 	.word	0x08005a41
 800598c:	08005a19 	.word	0x08005a19
 8005990:	08005a41 	.word	0x08005a41
 8005994:	08005a41 	.word	0x08005a41
 8005998:	08005a41 	.word	0x08005a41
 800599c:	08005a41 	.word	0x08005a41
 80059a0:	08005a41 	.word	0x08005a41
 80059a4:	08005a41 	.word	0x08005a41
 80059a8:	08005a41 	.word	0x08005a41
 80059ac:	08005a21 	.word	0x08005a21
 80059b0:	08005a41 	.word	0x08005a41
 80059b4:	08005a41 	.word	0x08005a41
 80059b8:	08005a41 	.word	0x08005a41
 80059bc:	08005a41 	.word	0x08005a41
 80059c0:	08005a41 	.word	0x08005a41
 80059c4:	08005a41 	.word	0x08005a41
 80059c8:	08005a41 	.word	0x08005a41
 80059cc:	08005a29 	.word	0x08005a29
 80059d0:	08005a41 	.word	0x08005a41
 80059d4:	08005a41 	.word	0x08005a41
 80059d8:	08005a41 	.word	0x08005a41
 80059dc:	08005a41 	.word	0x08005a41
 80059e0:	08005a41 	.word	0x08005a41
 80059e4:	08005a41 	.word	0x08005a41
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a31 	.word	0x08005a31
 80059f0:	08005a41 	.word	0x08005a41
 80059f4:	08005a41 	.word	0x08005a41
 80059f8:	08005a41 	.word	0x08005a41
 80059fc:	08005a41 	.word	0x08005a41
 8005a00:	08005a41 	.word	0x08005a41
 8005a04:	08005a41 	.word	0x08005a41
 8005a08:	08005a41 	.word	0x08005a41
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a16:	e233      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a1e:	e22f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a26:	e22b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a2e:	e227      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a36:	e223      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a3e:	e21f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a46:	bf00      	nop
 8005a48:	e21a      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6d      	ldr	r2, [pc, #436]	; (8005c04 <UART_SetConfig+0x354>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d132      	bne.n	8005aba <UART_SetConfig+0x20a>
 8005a54:	4b6a      	ldr	r3, [pc, #424]	; (8005c00 <UART_SetConfig+0x350>)
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d827      	bhi.n	8005ab0 <UART_SetConfig+0x200>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x1b8>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a81 	.word	0x08005a81
 8005a6c:	08005a89 	.word	0x08005a89
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a99 	.word	0x08005a99
 8005a78:	08005aa1 	.word	0x08005aa1
 8005a7c:	08005aa9 	.word	0x08005aa9
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a86:	e1fb      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8e:	e1f7      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a90:	2308      	movs	r3, #8
 8005a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a96:	e1f3      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9e:	e1ef      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa6:	e1eb      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aae:	e1e7      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ab6:	bf00      	nop
 8005ab8:	e1e2      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a52      	ldr	r2, [pc, #328]	; (8005c08 <UART_SetConfig+0x358>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d132      	bne.n	8005b2a <UART_SetConfig+0x27a>
 8005ac4:	4b4e      	ldr	r3, [pc, #312]	; (8005c00 <UART_SetConfig+0x350>)
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d827      	bhi.n	8005b20 <UART_SetConfig+0x270>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0x228>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005af1 	.word	0x08005af1
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	08005b01 	.word	0x08005b01
 8005ae4:	08005b09 	.word	0x08005b09
 8005ae8:	08005b11 	.word	0x08005b11
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	2300      	movs	r3, #0
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e1c3      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afe:	e1bf      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b06:	e1bb      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0e:	e1b7      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b10:	2320      	movs	r3, #32
 8005b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b16:	e1b3      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b1e:	e1af      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b20:	2380      	movs	r3, #128	; 0x80
 8005b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b26:	bf00      	nop
 8005b28:	e1aa      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a37      	ldr	r2, [pc, #220]	; (8005c0c <UART_SetConfig+0x35c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d132      	bne.n	8005b9a <UART_SetConfig+0x2ea>
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <UART_SetConfig+0x350>)
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b05      	cmp	r3, #5
 8005b3e:	d827      	bhi.n	8005b90 <UART_SetConfig+0x2e0>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0x298>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b66:	e18b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6e:	e187      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b76:	e183      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7e:	e17f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b80:	2320      	movs	r3, #32
 8005b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b86:	e17b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b8e:	e177      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b96:	bf00      	nop
 8005b98:	e172      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <UART_SetConfig+0x360>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d144      	bne.n	8005c2e <UART_SetConfig+0x37e>
 8005ba4:	4b16      	ldr	r3, [pc, #88]	; (8005c00 <UART_SetConfig+0x350>)
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	2b05      	cmp	r3, #5
 8005bae:	d839      	bhi.n	8005c24 <UART_SetConfig+0x374>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <UART_SetConfig+0x308>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e153      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e14f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e14b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	e147      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005bf0:	cfff69f3 	.word	0xcfff69f3
 8005bf4:	58000c00 	.word	0x58000c00
 8005bf8:	11fff4ff 	.word	0x11fff4ff
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	58024400 	.word	0x58024400
 8005c04:	40004400 	.word	0x40004400
 8005c08:	40004800 	.word	0x40004800
 8005c0c:	40004c00 	.word	0x40004c00
 8005c10:	40005000 	.word	0x40005000
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c1a:	e131      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005c1c:	2340      	movs	r3, #64	; 0x40
 8005c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c22:	e12d      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2a:	bf00      	nop
 8005c2c:	e128      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4ab6      	ldr	r2, [pc, #728]	; (8005f0c <UART_SetConfig+0x65c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d178      	bne.n	8005d2a <UART_SetConfig+0x47a>
 8005c38:	4bb5      	ldr	r3, [pc, #724]	; (8005f10 <UART_SetConfig+0x660>)
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c40:	2b28      	cmp	r3, #40	; 0x28
 8005c42:	d86d      	bhi.n	8005d20 <UART_SetConfig+0x470>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0x39c>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005cf1 	.word	0x08005cf1
 8005c50:	08005d21 	.word	0x08005d21
 8005c54:	08005d21 	.word	0x08005d21
 8005c58:	08005d21 	.word	0x08005d21
 8005c5c:	08005d21 	.word	0x08005d21
 8005c60:	08005d21 	.word	0x08005d21
 8005c64:	08005d21 	.word	0x08005d21
 8005c68:	08005d21 	.word	0x08005d21
 8005c6c:	08005cf9 	.word	0x08005cf9
 8005c70:	08005d21 	.word	0x08005d21
 8005c74:	08005d21 	.word	0x08005d21
 8005c78:	08005d21 	.word	0x08005d21
 8005c7c:	08005d21 	.word	0x08005d21
 8005c80:	08005d21 	.word	0x08005d21
 8005c84:	08005d21 	.word	0x08005d21
 8005c88:	08005d21 	.word	0x08005d21
 8005c8c:	08005d01 	.word	0x08005d01
 8005c90:	08005d21 	.word	0x08005d21
 8005c94:	08005d21 	.word	0x08005d21
 8005c98:	08005d21 	.word	0x08005d21
 8005c9c:	08005d21 	.word	0x08005d21
 8005ca0:	08005d21 	.word	0x08005d21
 8005ca4:	08005d21 	.word	0x08005d21
 8005ca8:	08005d21 	.word	0x08005d21
 8005cac:	08005d09 	.word	0x08005d09
 8005cb0:	08005d21 	.word	0x08005d21
 8005cb4:	08005d21 	.word	0x08005d21
 8005cb8:	08005d21 	.word	0x08005d21
 8005cbc:	08005d21 	.word	0x08005d21
 8005cc0:	08005d21 	.word	0x08005d21
 8005cc4:	08005d21 	.word	0x08005d21
 8005cc8:	08005d21 	.word	0x08005d21
 8005ccc:	08005d11 	.word	0x08005d11
 8005cd0:	08005d21 	.word	0x08005d21
 8005cd4:	08005d21 	.word	0x08005d21
 8005cd8:	08005d21 	.word	0x08005d21
 8005cdc:	08005d21 	.word	0x08005d21
 8005ce0:	08005d21 	.word	0x08005d21
 8005ce4:	08005d21 	.word	0x08005d21
 8005ce8:	08005d21 	.word	0x08005d21
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf6:	e0c3      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfe:	e0bf      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d06:	e0bb      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e0b7      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d10:	2320      	movs	r3, #32
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e0b3      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d18:	2340      	movs	r3, #64	; 0x40
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e0af      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d20:	2380      	movs	r3, #128	; 0x80
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	bf00      	nop
 8005d28:	e0aa      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a79      	ldr	r2, [pc, #484]	; (8005f14 <UART_SetConfig+0x664>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d132      	bne.n	8005d9a <UART_SetConfig+0x4ea>
 8005d34:	4b76      	ldr	r3, [pc, #472]	; (8005f10 <UART_SetConfig+0x660>)
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d827      	bhi.n	8005d90 <UART_SetConfig+0x4e0>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <UART_SetConfig+0x498>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e08b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e087      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e083      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e07f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d80:	2320      	movs	r3, #32
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e07b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e077      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	bf00      	nop
 8005d98:	e072      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <UART_SetConfig+0x668>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d132      	bne.n	8005e0a <UART_SetConfig+0x55a>
 8005da4:	4b5a      	ldr	r3, [pc, #360]	; (8005f10 <UART_SetConfig+0x660>)
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d827      	bhi.n	8005e00 <UART_SetConfig+0x550>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x508>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dd1 	.word	0x08005dd1
 8005dbc:	08005dd9 	.word	0x08005dd9
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e053      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e04f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005de0:	2308      	movs	r3, #8
 8005de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de6:	e04b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005de8:	2310      	movs	r3, #16
 8005dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dee:	e047      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005df0:	2320      	movs	r3, #32
 8005df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005df6:	e043      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dfe:	e03f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e00:	2380      	movs	r3, #128	; 0x80
 8005e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e06:	bf00      	nop
 8005e08:	e03a      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a43      	ldr	r2, [pc, #268]	; (8005f1c <UART_SetConfig+0x66c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d132      	bne.n	8005e7a <UART_SetConfig+0x5ca>
 8005e14:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <UART_SetConfig+0x660>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d827      	bhi.n	8005e70 <UART_SetConfig+0x5c0>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0x578>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005e41 	.word	0x08005e41
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	08005e51 	.word	0x08005e51
 8005e34:	08005e59 	.word	0x08005e59
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	2302      	movs	r3, #2
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e01b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e48:	2304      	movs	r3, #4
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e017      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e50:	2308      	movs	r3, #8
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e013      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e5e:	e00f      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e60:	2320      	movs	r3, #32
 8005e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e66:	e00b      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e68:	2340      	movs	r3, #64	; 0x40
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e007      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	bf00      	nop
 8005e78:	e002      	b.n	8005e80 <UART_SetConfig+0x5d0>
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <UART_SetConfig+0x66c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	f040 80b8 	bne.w	8005ffc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d019      	beq.n	8005ec8 <UART_SetConfig+0x618>
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	dc04      	bgt.n	8005ea2 <UART_SetConfig+0x5f2>
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d009      	beq.n	8005eb0 <UART_SetConfig+0x600>
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d00b      	beq.n	8005eb8 <UART_SetConfig+0x608>
 8005ea0:	e042      	b.n	8005f28 <UART_SetConfig+0x678>
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d02b      	beq.n	8005efe <UART_SetConfig+0x64e>
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d02c      	beq.n	8005f04 <UART_SetConfig+0x654>
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d014      	beq.n	8005ed8 <UART_SetConfig+0x628>
 8005eae:	e03b      	b.n	8005f28 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005eb0:	f7ff f89c 	bl	8004fec <HAL_RCCEx_GetD3PCLK1Freq>
 8005eb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005eb6:	e03d      	b.n	8005f34 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb8:	f107 0314 	add.w	r3, r7, #20
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff f8ab 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ec6:	e035      	b.n	8005f34 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec8:	f107 0308 	add.w	r3, r7, #8
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff f9ef 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ed6:	e02d      	b.n	8005f34 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed8:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <UART_SetConfig+0x660>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d009      	beq.n	8005ef8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <UART_SetConfig+0x660>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	4a0c      	ldr	r2, [pc, #48]	; (8005f20 <UART_SetConfig+0x670>)
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ef6:	e01d      	b.n	8005f34 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <UART_SetConfig+0x670>)
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005efc:	e01a      	b.n	8005f34 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <UART_SetConfig+0x674>)
 8005f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f02:	e017      	b.n	8005f34 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f0a:	e013      	b.n	8005f34 <UART_SetConfig+0x684>
 8005f0c:	40011400 	.word	0x40011400
 8005f10:	58024400 	.word	0x58024400
 8005f14:	40007800 	.word	0x40007800
 8005f18:	40007c00 	.word	0x40007c00
 8005f1c:	58000c00 	.word	0x58000c00
 8005f20:	03d09000 	.word	0x03d09000
 8005f24:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 824d 	beq.w	80063d6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	4aad      	ldr	r2, [pc, #692]	; (80061f8 <UART_SetConfig+0x948>)
 8005f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f4e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	6a3a      	ldr	r2, [r7, #32]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d305      	bcc.n	8005f6c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f66:	6a3a      	ldr	r2, [r7, #32]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d903      	bls.n	8005f74 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f72:	e230      	b.n	80063d6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	4618      	mov	r0, r3
 8005f78:	f04f 0100 	mov.w	r1, #0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	4a9d      	ldr	r2, [pc, #628]	; (80061f8 <UART_SetConfig+0x948>)
 8005f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f04f 0400 	mov.w	r4, #0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4623      	mov	r3, r4
 8005f90:	f7fa f9a2 	bl	80002d8 <__aeabi_uldivmod>
 8005f94:	4603      	mov	r3, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	0214      	lsls	r4, r2, #8
 8005fa6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005faa:	020b      	lsls	r3, r1, #8
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6852      	ldr	r2, [r2, #4]
 8005fb0:	0852      	lsrs	r2, r2, #1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	eb13 0b01 	adds.w	fp, r3, r1
 8005fbc:	eb44 0c02 	adc.w	ip, r4, r2
 8005fc0:	4658      	mov	r0, fp
 8005fc2:	4661      	mov	r1, ip
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f04f 0400 	mov.w	r4, #0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	f7fa f982 	bl	80002d8 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe0:	d308      	bcc.n	8005ff4 <UART_SetConfig+0x744>
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe8:	d204      	bcs.n	8005ff4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e1f0      	b.n	80063d6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ffa:	e1ec      	b.n	80063d6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006004:	f040 8100 	bne.w	8006208 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8006008:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	f200 80b7 	bhi.w	8006180 <UART_SetConfig+0x8d0>
 8006012:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x768>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800611d 	.word	0x0800611d
 800601c:	08006125 	.word	0x08006125
 8006020:	08006181 	.word	0x08006181
 8006024:	08006181 	.word	0x08006181
 8006028:	0800612d 	.word	0x0800612d
 800602c:	08006181 	.word	0x08006181
 8006030:	08006181 	.word	0x08006181
 8006034:	08006181 	.word	0x08006181
 8006038:	0800613d 	.word	0x0800613d
 800603c:	08006181 	.word	0x08006181
 8006040:	08006181 	.word	0x08006181
 8006044:	08006181 	.word	0x08006181
 8006048:	08006181 	.word	0x08006181
 800604c:	08006181 	.word	0x08006181
 8006050:	08006181 	.word	0x08006181
 8006054:	08006181 	.word	0x08006181
 8006058:	0800614d 	.word	0x0800614d
 800605c:	08006181 	.word	0x08006181
 8006060:	08006181 	.word	0x08006181
 8006064:	08006181 	.word	0x08006181
 8006068:	08006181 	.word	0x08006181
 800606c:	08006181 	.word	0x08006181
 8006070:	08006181 	.word	0x08006181
 8006074:	08006181 	.word	0x08006181
 8006078:	08006181 	.word	0x08006181
 800607c:	08006181 	.word	0x08006181
 8006080:	08006181 	.word	0x08006181
 8006084:	08006181 	.word	0x08006181
 8006088:	08006181 	.word	0x08006181
 800608c:	08006181 	.word	0x08006181
 8006090:	08006181 	.word	0x08006181
 8006094:	08006181 	.word	0x08006181
 8006098:	08006173 	.word	0x08006173
 800609c:	08006181 	.word	0x08006181
 80060a0:	08006181 	.word	0x08006181
 80060a4:	08006181 	.word	0x08006181
 80060a8:	08006181 	.word	0x08006181
 80060ac:	08006181 	.word	0x08006181
 80060b0:	08006181 	.word	0x08006181
 80060b4:	08006181 	.word	0x08006181
 80060b8:	08006181 	.word	0x08006181
 80060bc:	08006181 	.word	0x08006181
 80060c0:	08006181 	.word	0x08006181
 80060c4:	08006181 	.word	0x08006181
 80060c8:	08006181 	.word	0x08006181
 80060cc:	08006181 	.word	0x08006181
 80060d0:	08006181 	.word	0x08006181
 80060d4:	08006181 	.word	0x08006181
 80060d8:	08006181 	.word	0x08006181
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006181 	.word	0x08006181
 80060ec:	08006181 	.word	0x08006181
 80060f0:	08006181 	.word	0x08006181
 80060f4:	08006181 	.word	0x08006181
 80060f8:	08006181 	.word	0x08006181
 80060fc:	08006181 	.word	0x08006181
 8006100:	08006181 	.word	0x08006181
 8006104:	08006181 	.word	0x08006181
 8006108:	08006181 	.word	0x08006181
 800610c:	08006181 	.word	0x08006181
 8006110:	08006181 	.word	0x08006181
 8006114:	08006181 	.word	0x08006181
 8006118:	08006179 	.word	0x08006179
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe f84c 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006120:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006122:	e033      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006124:	f7fe f85e 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8006128:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800612a:	e02f      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe ff71 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613a:	e027      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff f8b5 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800614a:	e01f      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800614c:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <UART_SetConfig+0x94c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006158:	4b28      	ldr	r3, [pc, #160]	; (80061fc <UART_SetConfig+0x94c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	08db      	lsrs	r3, r3, #3
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	4a27      	ldr	r2, [pc, #156]	; (8006200 <UART_SetConfig+0x950>)
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800616a:	e00f      	b.n	800618c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <UART_SetConfig+0x950>)
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006170:	e00c      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006172:	4b24      	ldr	r3, [pc, #144]	; (8006204 <UART_SetConfig+0x954>)
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006176:	e009      	b.n	800618c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617e:	e005      	b.n	800618c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800618a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 8121 	beq.w	80063d6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	4a17      	ldr	r2, [pc, #92]	; (80061f8 <UART_SetConfig+0x948>)
 800619a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800619e:	461a      	mov	r2, r3
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a6:	005a      	lsls	r2, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	441a      	add	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	2b0f      	cmp	r3, #15
 80061c0:	d916      	bls.n	80061f0 <UART_SetConfig+0x940>
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d212      	bcs.n	80061f0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f023 030f 	bic.w	r3, r3, #15
 80061d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	b29a      	uxth	r2, r3
 80061e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061e2:	4313      	orrs	r3, r2
 80061e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e0f2      	b.n	80063d6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061f6:	e0ee      	b.n	80063d6 <UART_SetConfig+0xb26>
 80061f8:	0800a454 	.word	0x0800a454
 80061fc:	58024400 	.word	0x58024400
 8006200:	03d09000 	.word	0x03d09000
 8006204:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8006208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	f200 80b7 	bhi.w	8006380 <UART_SetConfig+0xad0>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x968>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	0800631d 	.word	0x0800631d
 800621c:	08006325 	.word	0x08006325
 8006220:	08006381 	.word	0x08006381
 8006224:	08006381 	.word	0x08006381
 8006228:	0800632d 	.word	0x0800632d
 800622c:	08006381 	.word	0x08006381
 8006230:	08006381 	.word	0x08006381
 8006234:	08006381 	.word	0x08006381
 8006238:	0800633d 	.word	0x0800633d
 800623c:	08006381 	.word	0x08006381
 8006240:	08006381 	.word	0x08006381
 8006244:	08006381 	.word	0x08006381
 8006248:	08006381 	.word	0x08006381
 800624c:	08006381 	.word	0x08006381
 8006250:	08006381 	.word	0x08006381
 8006254:	08006381 	.word	0x08006381
 8006258:	0800634d 	.word	0x0800634d
 800625c:	08006381 	.word	0x08006381
 8006260:	08006381 	.word	0x08006381
 8006264:	08006381 	.word	0x08006381
 8006268:	08006381 	.word	0x08006381
 800626c:	08006381 	.word	0x08006381
 8006270:	08006381 	.word	0x08006381
 8006274:	08006381 	.word	0x08006381
 8006278:	08006381 	.word	0x08006381
 800627c:	08006381 	.word	0x08006381
 8006280:	08006381 	.word	0x08006381
 8006284:	08006381 	.word	0x08006381
 8006288:	08006381 	.word	0x08006381
 800628c:	08006381 	.word	0x08006381
 8006290:	08006381 	.word	0x08006381
 8006294:	08006381 	.word	0x08006381
 8006298:	08006373 	.word	0x08006373
 800629c:	08006381 	.word	0x08006381
 80062a0:	08006381 	.word	0x08006381
 80062a4:	08006381 	.word	0x08006381
 80062a8:	08006381 	.word	0x08006381
 80062ac:	08006381 	.word	0x08006381
 80062b0:	08006381 	.word	0x08006381
 80062b4:	08006381 	.word	0x08006381
 80062b8:	08006381 	.word	0x08006381
 80062bc:	08006381 	.word	0x08006381
 80062c0:	08006381 	.word	0x08006381
 80062c4:	08006381 	.word	0x08006381
 80062c8:	08006381 	.word	0x08006381
 80062cc:	08006381 	.word	0x08006381
 80062d0:	08006381 	.word	0x08006381
 80062d4:	08006381 	.word	0x08006381
 80062d8:	08006381 	.word	0x08006381
 80062dc:	08006381 	.word	0x08006381
 80062e0:	08006381 	.word	0x08006381
 80062e4:	08006381 	.word	0x08006381
 80062e8:	08006381 	.word	0x08006381
 80062ec:	08006381 	.word	0x08006381
 80062f0:	08006381 	.word	0x08006381
 80062f4:	08006381 	.word	0x08006381
 80062f8:	08006381 	.word	0x08006381
 80062fc:	08006381 	.word	0x08006381
 8006300:	08006381 	.word	0x08006381
 8006304:	08006381 	.word	0x08006381
 8006308:	08006381 	.word	0x08006381
 800630c:	08006381 	.word	0x08006381
 8006310:	08006381 	.word	0x08006381
 8006314:	08006381 	.word	0x08006381
 8006318:	08006379 	.word	0x08006379
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fd ff4c 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006320:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006322:	e033      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fd ff5e 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8006328:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800632a:	e02f      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fe71 	bl	8005018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800633a:	e027      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe ffb5 	bl	80052b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800634a:	e01f      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <UART_SetConfig+0xb50>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006358:	4b29      	ldr	r3, [pc, #164]	; (8006400 <UART_SetConfig+0xb50>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	4a28      	ldr	r2, [pc, #160]	; (8006404 <UART_SetConfig+0xb54>)
 8006364:	fa22 f303 	lsr.w	r3, r2, r3
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800636a:	e00f      	b.n	800638c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800636c:	4b25      	ldr	r3, [pc, #148]	; (8006404 <UART_SetConfig+0xb54>)
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006370:	e00c      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006372:	4b25      	ldr	r3, [pc, #148]	; (8006408 <UART_SetConfig+0xb58>)
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006376:	e009      	b.n	800638c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800637e:	e005      	b.n	800638c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800638a:	bf00      	nop
    }

    if (pclk != 0U)
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b00      	cmp	r3, #0
 8006390:	d021      	beq.n	80063d6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	4a1d      	ldr	r2, [pc, #116]	; (800640c <UART_SetConfig+0xb5c>)
 8006398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800639c:	461a      	mov	r2, r3
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	441a      	add	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d908      	bls.n	80063d0 <UART_SetConfig+0xb20>
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d204      	bcs.n	80063d0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063cc:	60da      	str	r2, [r3, #12]
 80063ce:	e002      	b.n	80063d6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80063f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3738      	adds	r7, #56	; 0x38
 80063fa:	46bd      	mov	sp, r7
 80063fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006400:	58024400 	.word	0x58024400
 8006404:	03d09000 	.word	0x03d09000
 8006408:	003d0900 	.word	0x003d0900
 800640c:	0800a454 	.word	0x0800a454

08006410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f003 0308 	and.w	r3, r3, #8
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f003 0310 	and.w	r3, r3, #16
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01a      	beq.n	8006526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650e:	d10a      	bne.n	8006526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	430a      	orrs	r2, r1
 8006524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
  }
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af02      	add	r7, sp, #8
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006564:	f7fa fd5e 	bl	8001024 <HAL_GetTick>
 8006568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d10e      	bne.n	8006596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f82c 	bl	80065e4 <UART_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e022      	b.n	80065dc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d10e      	bne.n	80065c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f816 	bl	80065e4 <UART_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e00c      	b.n	80065dc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f4:	e062      	b.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fc:	d05e      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fa fd11 	bl	8001024 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <UART_WaitOnFlagUntilTimeout+0x30>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d11d      	bne.n	8006650 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006622:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e045      	b.n	80066dc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02e      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666c:	d126      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006676:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006686:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e00f      	b.n	80066dc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69da      	ldr	r2, [r3, #28]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4013      	ands	r3, r2
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	bf0c      	ite	eq
 80066cc:	2301      	moveq	r3, #1
 80066ce:	2300      	movne	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d08d      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d101      	bne.n	80066fa <HAL_UARTEx_DisableFifoMode+0x16>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e027      	b.n	800674a <HAL_UARTEx_DisableFifoMode+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2224      	movs	r2, #36	; 0x24
 8006706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0201 	bic.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006728:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800676a:	2302      	movs	r3, #2
 800676c:	e02d      	b.n	80067ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2224      	movs	r2, #36	; 0x24
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f850 	bl	8006850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e02d      	b.n	8006846 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2224      	movs	r2, #36	; 0x24
 80067f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f812 	bl	8006850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
	...

08006850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006858:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <UARTEx_SetNbDataToProcess+0xc8>)
 800685a:	f107 0314 	add.w	r3, r7, #20
 800685e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006862:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006866:	4a2d      	ldr	r2, [pc, #180]	; (800691c <UARTEx_SetNbDataToProcess+0xcc>)
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006870:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800688c:	e03d      	b.n	800690a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800688e:	2310      	movs	r3, #16
 8006890:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006892:	2310      	movs	r3, #16
 8006894:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0e5b      	lsrs	r3, r3, #25
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	0f5b      	lsrs	r3, r3, #29
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80068b6:	7fbb      	ldrb	r3, [r7, #30]
 80068b8:	7f3a      	ldrb	r2, [r7, #28]
 80068ba:	f107 0120 	add.w	r1, r7, #32
 80068be:	440a      	add	r2, r1
 80068c0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068c4:	fb02 f303 	mul.w	r3, r2, r3
 80068c8:	7f3a      	ldrb	r2, [r7, #28]
 80068ca:	f107 0120 	add.w	r1, r7, #32
 80068ce:	440a      	add	r2, r1
 80068d0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80068d8:	b29a      	uxth	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	7f7a      	ldrb	r2, [r7, #29]
 80068e4:	f107 0120 	add.w	r1, r7, #32
 80068e8:	440a      	add	r2, r1
 80068ea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80068ee:	fb02 f303 	mul.w	r3, r2, r3
 80068f2:	7f7a      	ldrb	r2, [r7, #29]
 80068f4:	f107 0120 	add.w	r1, r7, #32
 80068f8:	440a      	add	r2, r1
 80068fa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800690a:	bf00      	nop
 800690c:	3724      	adds	r7, #36	; 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	0800a3ec 	.word	0x0800a3ec
 800691c:	0800a3f4 	.word	0x0800a3f4

08006920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006920:	b084      	sub	sp, #16
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	f107 001c 	add.w	r0, r7, #28
 800692e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	2b01      	cmp	r3, #1
 8006936:	d120      	bne.n	800697a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	4b25      	ldr	r3, [pc, #148]	; (80069e0 <USB_CoreInit+0xc0>)
 800694a:	4013      	ands	r3, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800695c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fabe 	bl	8007ef0 <USB_CoreReset>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
 8006978:	e01a      	b.n	80069b0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fab2 	bl	8007ef0 <USB_CoreReset>
 800698c:	4603      	mov	r3, r0
 800698e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
 80069a2:	e005      	b.n	80069b0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d10b      	bne.n	80069ce <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f043 0206 	orr.w	r2, r3, #6
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f043 0220 	orr.w	r2, r3, #32
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069da:	b004      	add	sp, #16
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	ffbdffbf 	.word	0xffbdffbf

080069e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d165      	bne.n	8006ac4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a41      	ldr	r2, [pc, #260]	; (8006b00 <USB_SetTurnaroundTime+0x11c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d906      	bls.n	8006a0e <USB_SetTurnaroundTime+0x2a>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4a40      	ldr	r2, [pc, #256]	; (8006b04 <USB_SetTurnaroundTime+0x120>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d802      	bhi.n	8006a0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a08:	230f      	movs	r3, #15
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e062      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a3c      	ldr	r2, [pc, #240]	; (8006b04 <USB_SetTurnaroundTime+0x120>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d906      	bls.n	8006a24 <USB_SetTurnaroundTime+0x40>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4a3b      	ldr	r2, [pc, #236]	; (8006b08 <USB_SetTurnaroundTime+0x124>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d802      	bhi.n	8006a24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a1e:	230e      	movs	r3, #14
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e057      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <USB_SetTurnaroundTime+0x124>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d906      	bls.n	8006a3a <USB_SetTurnaroundTime+0x56>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4a37      	ldr	r2, [pc, #220]	; (8006b0c <USB_SetTurnaroundTime+0x128>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d802      	bhi.n	8006a3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a34:	230d      	movs	r3, #13
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e04c      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a33      	ldr	r2, [pc, #204]	; (8006b0c <USB_SetTurnaroundTime+0x128>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d906      	bls.n	8006a50 <USB_SetTurnaroundTime+0x6c>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a32      	ldr	r2, [pc, #200]	; (8006b10 <USB_SetTurnaroundTime+0x12c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d802      	bhi.n	8006a50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e041      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a2f      	ldr	r2, [pc, #188]	; (8006b10 <USB_SetTurnaroundTime+0x12c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d906      	bls.n	8006a66 <USB_SetTurnaroundTime+0x82>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a2e      	ldr	r2, [pc, #184]	; (8006b14 <USB_SetTurnaroundTime+0x130>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d802      	bhi.n	8006a66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a60:	230b      	movs	r3, #11
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e036      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <USB_SetTurnaroundTime+0x130>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d906      	bls.n	8006a7c <USB_SetTurnaroundTime+0x98>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4a29      	ldr	r2, [pc, #164]	; (8006b18 <USB_SetTurnaroundTime+0x134>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d802      	bhi.n	8006a7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a76:	230a      	movs	r3, #10
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e02b      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <USB_SetTurnaroundTime+0x134>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d906      	bls.n	8006a92 <USB_SetTurnaroundTime+0xae>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <USB_SetTurnaroundTime+0x138>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d802      	bhi.n	8006a92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a8c:	2309      	movs	r3, #9
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e020      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <USB_SetTurnaroundTime+0x138>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d906      	bls.n	8006aa8 <USB_SetTurnaroundTime+0xc4>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <USB_SetTurnaroundTime+0x13c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d802      	bhi.n	8006aa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e015      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	; (8006b20 <USB_SetTurnaroundTime+0x13c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d906      	bls.n	8006abe <USB_SetTurnaroundTime+0xda>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <USB_SetTurnaroundTime+0x140>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d802      	bhi.n	8006abe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ab8:	2307      	movs	r3, #7
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e00a      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006abe:	2306      	movs	r3, #6
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e007      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006aca:	2309      	movs	r3, #9
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e001      	b.n	8006ad4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ad0:	2309      	movs	r3, #9
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	029b      	lsls	r3, r3, #10
 8006ae8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	00d8acbf 	.word	0x00d8acbf
 8006b04:	00e4e1bf 	.word	0x00e4e1bf
 8006b08:	00f423ff 	.word	0x00f423ff
 8006b0c:	0106737f 	.word	0x0106737f
 8006b10:	011a499f 	.word	0x011a499f
 8006b14:	01312cff 	.word	0x01312cff
 8006b18:	014ca43f 	.word	0x014ca43f
 8006b1c:	016e35ff 	.word	0x016e35ff
 8006b20:	01a6ab1f 	.word	0x01a6ab1f
 8006b24:	01e847ff 	.word	0x01e847ff

08006b28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f043 0201 	orr.w	r2, r3, #1
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d106      	bne.n	8006b98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	e00b      	b.n	8006bb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60da      	str	r2, [r3, #12]
 8006baa:	e001      	b.n	8006bb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e003      	b.n	8006bb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006bb0:	2032      	movs	r0, #50	; 0x32
 8006bb2:	f7fa fa43 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	e009      	b.n	8006bf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3340      	adds	r3, #64	; 0x40
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b0e      	cmp	r3, #14
 8006bf8:	d9f2      	bls.n	8006be0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11c      	bne.n	8006c3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c0e:	f043 0302 	orr.w	r3, r3, #2
 8006c12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	e005      	b.n	8006c46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c58:	4619      	mov	r1, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c60:	461a      	mov	r2, r3
 8006c62:	680b      	ldr	r3, [r1, #0]
 8006c64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d10c      	bne.n	8006c86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c72:	2100      	movs	r1, #0
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f949 	bl	8006f0c <USB_SetDevSpeed>
 8006c7a:	e008      	b.n	8006c8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f944 	bl	8006f0c <USB_SetDevSpeed>
 8006c84:	e003      	b.n	8006c8e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c86:	2103      	movs	r1, #3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f93f 	bl	8006f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c8e:	2110      	movs	r1, #16
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8f3 	bl	8006e7c <USB_FlushTxFifo>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f911 	bl	8006ec8 <USB_FlushRxFifo>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e043      	b.n	8006d62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf0:	d118      	bne.n	8006d24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e013      	b.n	8006d36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e008      	b.n	8006d36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d42:	461a      	mov	r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d54:	461a      	mov	r2, r3
 8006d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3b7      	bcc.n	8006cda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e043      	b.n	8006df8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d86:	d118      	bne.n	8006dba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e013      	b.n	8006dcc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e008      	b.n	8006dcc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	461a      	mov	r2, r3
 8006dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006df0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	3301      	adds	r3, #1
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d3b7      	bcc.n	8006d70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	f043 0210 	orr.w	r2, r3, #16
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <USB_DevInit+0x2b4>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f043 0208 	orr.w	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <USB_DevInit+0x2b8>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e70:	b004      	add	sp, #16
 8006e72:	4770      	bx	lr
 8006e74:	803c3800 	.word	0x803c3800
 8006e78:	40000004 	.word	0x40000004

08006e7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <USB_FlushTxFifo+0x48>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d0f0      	beq.n	8006e96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	00030d40 	.word	0x00030d40

08006ec8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <USB_FlushRxFifo+0x40>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d0f0      	beq.n	8006eda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	00030d40 	.word	0x00030d40

08006f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	78fb      	ldrb	r3, [r7, #3]
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b087      	sub	sp, #28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0306 	and.w	r3, r3, #6
 8006f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d102      	bne.n	8006f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
 8006f62:	e00a      	b.n	8006f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d002      	beq.n	8006f70 <USB_GetDevSpeed+0x32>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d102      	bne.n	8006f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f70:	2302      	movs	r3, #2
 8006f72:	75fb      	strb	r3, [r7, #23]
 8006f74:	e001      	b.n	8006f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f76:	230f      	movs	r3, #15
 8006f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d139      	bne.n	8007018 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	68f9      	ldr	r1, [r7, #12]
 8006fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d153      	bne.n	8007084 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	059b      	lsls	r3, r3, #22
 8006ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007000:	431a      	orrs	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	0159      	lsls	r1, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	440b      	add	r3, r1
 800700a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700e:	4619      	mov	r1, r3
 8007010:	4b20      	ldr	r3, [pc, #128]	; (8007094 <USB_ActivateEndpoint+0x10c>)
 8007012:	4313      	orrs	r3, r2
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	e035      	b.n	8007084 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	68f9      	ldr	r1, [r7, #12]
 8007032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007036:	4313      	orrs	r3, r2
 8007038:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d119      	bne.n	8007084 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	78db      	ldrb	r3, [r3, #3]
 800706a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800706c:	430b      	orrs	r3, r1
 800706e:	431a      	orrs	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	0159      	lsls	r1, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	440b      	add	r3, r1
 8007078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707c:	4619      	mov	r1, r3
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <USB_ActivateEndpoint+0x10c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	10008000 	.word	0x10008000

08007098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	785b      	ldrb	r3, [r3, #1]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d161      	bne.n	8007178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ca:	d11f      	bne.n	800710c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	0151      	lsls	r1, r2, #5
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	440a      	add	r2, r1
 80070e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800710a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	2101      	movs	r1, #1
 800711e:	fa01 f303 	lsl.w	r3, r1, r3
 8007122:	b29b      	uxth	r3, r3
 8007124:	43db      	mvns	r3, r3
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800712c:	4013      	ands	r3, r2
 800712e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	69da      	ldr	r2, [r3, #28]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f003 030f 	and.w	r3, r3, #15
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f303 	lsl.w	r3, r1, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007150:	4013      	ands	r3, r2
 8007152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	0159      	lsls	r1, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	440b      	add	r3, r1
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	4619      	mov	r1, r3
 8007170:	4b35      	ldr	r3, [pc, #212]	; (8007248 <USB_DeactivateEndpoint+0x1b0>)
 8007172:	4013      	ands	r3, r2
 8007174:	600b      	str	r3, [r1, #0]
 8007176:	e060      	b.n	800723a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800718a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718e:	d11f      	bne.n	80071d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	f003 030f 	and.w	r3, r3, #15
 80071e0:	2101      	movs	r1, #1
 80071e2:	fa01 f303 	lsl.w	r3, r1, r3
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	43db      	mvns	r3, r3
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f0:	4013      	ands	r3, r2
 80071f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	f003 030f 	and.w	r3, r3, #15
 8007204:	2101      	movs	r1, #1
 8007206:	fa01 f303 	lsl.w	r3, r1, r3
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	43db      	mvns	r3, r3
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007214:	4013      	ands	r3, r2
 8007216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	0159      	lsls	r1, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	440b      	add	r3, r1
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	4619      	mov	r1, r3
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <USB_DeactivateEndpoint+0x1b4>)
 8007236:	4013      	ands	r3, r2
 8007238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	ec337800 	.word	0xec337800
 800724c:	eff37800 	.word	0xeff37800

08007250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b01      	cmp	r3, #1
 800726e:	f040 8163 	bne.w	8007538 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d132      	bne.n	80072e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	691a      	ldr	r2, [r3, #16]
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	0159      	lsls	r1, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	440b      	add	r3, r1
 8007290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007294:	4619      	mov	r1, r3
 8007296:	4ba5      	ldr	r3, [pc, #660]	; (800752c <USB_EPStartXfer+0x2dc>)
 8007298:	4013      	ands	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	0159      	lsls	r1, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	440b      	add	r3, r1
 80072d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d6:	4619      	mov	r1, r3
 80072d8:	4b95      	ldr	r3, [pc, #596]	; (8007530 <USB_EPStartXfer+0x2e0>)
 80072da:	4013      	ands	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]
 80072de:	e074      	b.n	80073ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	0159      	lsls	r1, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	440b      	add	r3, r1
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	4619      	mov	r1, r3
 80072fc:	4b8c      	ldr	r3, [pc, #560]	; (8007530 <USB_EPStartXfer+0x2e0>)
 80072fe:	4013      	ands	r3, r2
 8007300:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	0159      	lsls	r1, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	440b      	add	r3, r1
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	4619      	mov	r1, r3
 800731e:	4b83      	ldr	r3, [pc, #524]	; (800752c <USB_EPStartXfer+0x2dc>)
 8007320:	4013      	ands	r3, r2
 8007322:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6959      	ldr	r1, [r3, #20]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	440b      	add	r3, r1
 800733c:	1e59      	subs	r1, r3, #1
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	fbb1 f3f3 	udiv	r3, r1, r3
 8007346:	04d9      	lsls	r1, r3, #19
 8007348:	4b7a      	ldr	r3, [pc, #488]	; (8007534 <USB_EPStartXfer+0x2e4>)
 800734a:	400b      	ands	r3, r1
 800734c:	69b9      	ldr	r1, [r7, #24]
 800734e:	0148      	lsls	r0, r1, #5
 8007350:	69f9      	ldr	r1, [r7, #28]
 8007352:	4401      	add	r1, r0
 8007354:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007358:	4313      	orrs	r3, r2
 800735a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007372:	69b9      	ldr	r1, [r7, #24]
 8007374:	0148      	lsls	r0, r1, #5
 8007376:	69f9      	ldr	r1, [r7, #28]
 8007378:	4401      	add	r1, r0
 800737a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800737e:	4313      	orrs	r3, r2
 8007380:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	78db      	ldrb	r3, [r3, #3]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d11f      	bne.n	80073ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80073a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d14b      	bne.n	8007468 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	461a      	mov	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	78db      	ldrb	r3, [r3, #3]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d128      	bne.n	8007446 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e00f      	b.n	8007446 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	e133      	b.n	80076d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007486:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	78db      	ldrb	r3, [r3, #3]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d015      	beq.n	80074bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 811b 	beq.w	80076d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	2101      	movs	r1, #1
 80074ac:	fa01 f303 	lsl.w	r3, r1, r3
 80074b0:	69f9      	ldr	r1, [r7, #28]
 80074b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074b6:	4313      	orrs	r3, r2
 80074b8:	634b      	str	r3, [r1, #52]	; 0x34
 80074ba:	e109      	b.n	80076d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d110      	bne.n	80074ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	e00f      	b.n	800750e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	69ba      	ldr	r2, [r7, #24]
 80074fe:	0151      	lsls	r1, r2, #5
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	440a      	add	r2, r1
 8007504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	68d9      	ldr	r1, [r3, #12]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	b298      	uxth	r0, r3
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	4603      	mov	r3, r0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fa38 	bl	8007998 <USB_WritePacket>
 8007528:	e0d2      	b.n	80076d0 <USB_EPStartXfer+0x480>
 800752a:	bf00      	nop
 800752c:	e007ffff 	.word	0xe007ffff
 8007530:	fff80000 	.word	0xfff80000
 8007534:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	0159      	lsls	r1, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	440b      	add	r3, r1
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	4619      	mov	r1, r3
 8007554:	4b61      	ldr	r3, [pc, #388]	; (80076dc <USB_EPStartXfer+0x48c>)
 8007556:	4013      	ands	r3, r2
 8007558:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	0159      	lsls	r1, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	440b      	add	r3, r1
 8007570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007574:	4619      	mov	r1, r3
 8007576:	4b5a      	ldr	r3, [pc, #360]	; (80076e0 <USB_EPStartXfer+0x490>)
 8007578:	4013      	ands	r3, r2
 800757a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d123      	bne.n	80075cc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	691a      	ldr	r2, [r3, #16]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	0148      	lsls	r0, r1, #5
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	4401      	add	r1, r0
 80075a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a6:	4313      	orrs	r3, r2
 80075a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075c8:	6113      	str	r3, [r2, #16]
 80075ca:	e033      	b.n	8007634 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	695a      	ldr	r2, [r3, #20]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	1e5a      	subs	r2, r3, #1
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	8afb      	ldrh	r3, [r7, #22]
 80075f2:	04d9      	lsls	r1, r3, #19
 80075f4:	4b3b      	ldr	r3, [pc, #236]	; (80076e4 <USB_EPStartXfer+0x494>)
 80075f6:	400b      	ands	r3, r1
 80075f8:	69b9      	ldr	r1, [r7, #24]
 80075fa:	0148      	lsls	r0, r1, #5
 80075fc:	69f9      	ldr	r1, [r7, #28]
 80075fe:	4401      	add	r1, r0
 8007600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007604:	4313      	orrs	r3, r2
 8007606:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	8af9      	ldrh	r1, [r7, #22]
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	0148      	lsls	r0, r1, #5
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	4401      	add	r1, r0
 800762c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007630:	4313      	orrs	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10d      	bne.n	8007656 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	68d9      	ldr	r1, [r3, #12]
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	460a      	mov	r2, r1
 8007654:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	78db      	ldrb	r3, [r3, #3]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d128      	bne.n	80076b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766a:	2b00      	cmp	r3, #0
 800766c:	d110      	bne.n	8007690 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	0151      	lsls	r1, r2, #5
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	440a      	add	r2, r1
 8007684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e00f      	b.n	80076b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	0151      	lsls	r1, r2, #5
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	440a      	add	r2, r1
 80076c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	fff80000 	.word	0xfff80000
 80076e0:	e007ffff 	.word	0xe007ffff
 80076e4:	1ff80000 	.word	0x1ff80000

080076e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	2b01      	cmp	r3, #1
 8007706:	f040 80cd 	bne.w	80078a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d132      	bne.n	8007778 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	0159      	lsls	r1, r3, #5
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	440b      	add	r3, r1
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	4619      	mov	r1, r3
 800772e:	4b98      	ldr	r3, [pc, #608]	; (8007990 <USB_EP0StartXfer+0x2a8>)
 8007730:	4013      	ands	r3, r2
 8007732:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	0159      	lsls	r1, r3, #5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	440b      	add	r3, r1
 800776a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776e:	4619      	mov	r1, r3
 8007770:	4b88      	ldr	r3, [pc, #544]	; (8007994 <USB_EP0StartXfer+0x2ac>)
 8007772:	4013      	ands	r3, r2
 8007774:	610b      	str	r3, [r1, #16]
 8007776:	e04e      	b.n	8007816 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	0159      	lsls	r1, r3, #5
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	440b      	add	r3, r1
 800778e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007792:	4619      	mov	r1, r3
 8007794:	4b7f      	ldr	r3, [pc, #508]	; (8007994 <USB_EP0StartXfer+0x2ac>)
 8007796:	4013      	ands	r3, r2
 8007798:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	691a      	ldr	r2, [r3, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	0159      	lsls	r1, r3, #5
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	440b      	add	r3, r1
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	4619      	mov	r1, r3
 80077b6:	4b76      	ldr	r3, [pc, #472]	; (8007990 <USB_EP0StartXfer+0x2a8>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	695a      	ldr	r2, [r3, #20]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d903      	bls.n	80077d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	0151      	lsls	r1, r2, #5
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	440a      	add	r2, r1
 80077e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	691a      	ldr	r2, [r3, #16]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007806:	6939      	ldr	r1, [r7, #16]
 8007808:	0148      	lsls	r0, r1, #5
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	4401      	add	r1, r0
 800780e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007812:	4313      	orrs	r3, r2
 8007814:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d11e      	bne.n	800785a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	461a      	mov	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e092      	b.n	8007980 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	440a      	add	r2, r1
 8007870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007878:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d07e      	beq.n	8007980 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	2101      	movs	r1, #1
 8007894:	fa01 f303 	lsl.w	r3, r1, r3
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800789e:	4313      	orrs	r3, r2
 80078a0:	634b      	str	r3, [r1, #52]	; 0x34
 80078a2:	e06d      	b.n	8007980 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	0159      	lsls	r1, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	440b      	add	r3, r1
 80078ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078be:	4619      	mov	r1, r3
 80078c0:	4b34      	ldr	r3, [pc, #208]	; (8007994 <USB_EP0StartXfer+0x2ac>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	0159      	lsls	r1, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	440b      	add	r3, r1
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	4619      	mov	r1, r3
 80078e2:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <USB_EP0StartXfer+0x2a8>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007916:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800792e:	6939      	ldr	r1, [r7, #16]
 8007930:	0148      	lsls	r0, r1, #5
 8007932:	6979      	ldr	r1, [r7, #20]
 8007934:	4401      	add	r1, r0
 8007936:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800793a:	4313      	orrs	r3, r2
 800793c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10d      	bne.n	8007960 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68d9      	ldr	r1, [r3, #12]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795c:	460a      	mov	r2, r1
 800795e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800797e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e007ffff 	.word	0xe007ffff
 8007994:	fff80000 	.word	0xfff80000

08007998 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007998:	b480      	push	{r7}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	460b      	mov	r3, r1
 80079a8:	71fb      	strb	r3, [r7, #7]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80079b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d11a      	bne.n	80079f4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079be:	88bb      	ldrh	r3, [r7, #4]
 80079c0:	3303      	adds	r3, #3
 80079c2:	089b      	lsrs	r3, r3, #2
 80079c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	e00f      	b.n	80079ec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079cc:	79fb      	ldrb	r3, [r7, #7]
 80079ce:	031a      	lsls	r2, r3, #12
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d8:	461a      	mov	r2, r3
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3304      	adds	r3, #4
 80079e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	3301      	adds	r3, #1
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d3eb      	bcc.n	80079cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3724      	adds	r7, #36	; 0x24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b089      	sub	sp, #36	; 0x24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007a18:	88fb      	ldrh	r3, [r7, #6]
 8007a1a:	3303      	adds	r3, #3
 8007a1c:	089b      	lsrs	r3, r3, #2
 8007a1e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	e00b      	b.n	8007a3e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3304      	adds	r3, #4
 8007a36:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3ef      	bcc.n	8007a26 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a46:	69fb      	ldr	r3, [r7, #28]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3724      	adds	r7, #36	; 0x24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d12c      	bne.n	8007aca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	db12      	blt.n	8007aa8 <USB_EPSetStall+0x54>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00f      	beq.n	8007aa8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	0151      	lsls	r1, r2, #5
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007aa6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e02b      	b.n	8007b22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db12      	blt.n	8007b02 <USB_EPSetStall+0xae>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00f      	beq.n	8007b02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	0151      	lsls	r1, r2, #5
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	440a      	add	r2, r1
 8007af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007afc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d128      	bne.n	8007b9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	2b03      	cmp	r3, #3
 8007b72:	d003      	beq.n	8007b7c <USB_EPClearStall+0x4c>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	78db      	ldrb	r3, [r3, #3]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d138      	bne.n	8007bee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	e027      	b.n	8007bee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	78db      	ldrb	r3, [r3, #3]
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d003      	beq.n	8007bce <USB_EPClearStall+0x9e>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d10f      	bne.n	8007bee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	0151      	lsls	r1, r2, #5
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	440a      	add	r2, r1
 8007be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c1a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c36:	4313      	orrs	r3, r2
 8007c38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c62:	f023 0302 	bic.w	r3, r3, #2
 8007c66:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c68:	2003      	movs	r0, #3
 8007c6a:	f7f9 f9e7 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007c98:	2003      	movs	r0, #3
 8007c9a:	f7f9 f9cf 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr

08007cce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	4013      	ands	r3, r2
 8007cf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	4013      	ands	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	b29b      	uxth	r3, r3
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3714      	adds	r7, #20
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d64:	68bb      	ldr	r3, [r7, #8]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b087      	sub	sp, #28
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007da2:	01db      	lsls	r3, r3, #7
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	f003 0301 	and.w	r3, r3, #1
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e06:	4619      	mov	r1, r3
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <USB_ActivateSetup+0x44>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	fffff800 	.word	0xfffff800

08007e34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	333c      	adds	r3, #60	; 0x3c
 8007e4a:	3304      	adds	r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <USB_EP0_OutStart+0xb8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d90a      	bls.n	8007e6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e68:	d101      	bne.n	8007e6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e037      	b.n	8007ede <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9c:	f043 0318 	orr.w	r3, r3, #24
 8007ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007eb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10f      	bne.n	8007edc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007eda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	4f54300a 	.word	0x4f54300a

08007ef0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <USB_CoreReset+0x64>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e01b      	b.n	8007f46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	daf2      	bge.n	8007efc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	f043 0201 	orr.w	r2, r3, #1
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <USB_CoreReset+0x64>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d901      	bls.n	8007f38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e006      	b.n	8007f46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d0f0      	beq.n	8007f26 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	00030d40 	.word	0x00030d40

08007f58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f68:	f002 f956 	bl	800a218 <malloc>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e066      	b.n	8008050 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7c1b      	ldrb	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d119      	bne.n	8007fc6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f96:	2202      	movs	r2, #2
 8007f98:	2181      	movs	r1, #129	; 0x81
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 ffc3 	bl	8009f26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007faa:	2202      	movs	r2, #2
 8007fac:	2101      	movs	r1, #1
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ffb9 	bl	8009f26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007fc4:	e016      	b.n	8007ff4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	2202      	movs	r2, #2
 8007fca:	2181      	movs	r1, #129	; 0x81
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 ffaa 	bl	8009f26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fd8:	2340      	movs	r3, #64	; 0x40
 8007fda:	2202      	movs	r2, #2
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 ffa1 	bl	8009f26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2210      	movs	r2, #16
 8007ff0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	2182      	movs	r1, #130	; 0x82
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 ff93 	bl	8009f26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008034:	2101      	movs	r1, #1
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f002 f864 	bl	800a104 <USBD_LL_PrepareReceive>
 800803c:	e007      	b.n	800804e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	2101      	movs	r1, #1
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f002 f85b 	bl	800a104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008068:	2181      	movs	r1, #129	; 0x81
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 ff81 	bl	8009f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008076:	2101      	movs	r1, #1
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 ff7a 	bl	8009f72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008086:	2182      	movs	r1, #130	; 0x82
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 ff72 	bl	8009f72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 f8b5 	bl	800a228 <free>
    pdev->pClassData = NULL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d03a      	beq.n	8008170 <USBD_CDC_Setup+0xa0>
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	f040 8097 	bne.w	800822e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	88db      	ldrh	r3, [r3, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d029      	beq.n	800815c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b25b      	sxtb	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	da11      	bge.n	8008136 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800811e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	88d2      	ldrh	r2, [r2, #6]
 8008124:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008126:	6939      	ldr	r1, [r7, #16]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	88db      	ldrh	r3, [r3, #6]
 800812c:	461a      	mov	r2, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fa9d 	bl	800966e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008134:	e082      	b.n	800823c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	785a      	ldrb	r2, [r3, #1]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	88db      	ldrh	r3, [r3, #6]
 8008144:	b2da      	uxtb	r2, r3
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800814c:	6939      	ldr	r1, [r7, #16]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	88db      	ldrh	r3, [r3, #6]
 8008152:	461a      	mov	r2, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 fab6 	bl	80096c6 <USBD_CtlPrepareRx>
    break;
 800815a:	e06f      	b.n	800823c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	7850      	ldrb	r0, [r2, #1]
 8008168:	2200      	movs	r2, #0
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	4798      	blx	r3
    break;
 800816e:	e065      	b.n	800823c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	2b0b      	cmp	r3, #11
 8008176:	d84f      	bhi.n	8008218 <USBD_CDC_Setup+0x148>
 8008178:	a201      	add	r2, pc, #4	; (adr r2, 8008180 <USBD_CDC_Setup+0xb0>)
 800817a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817e:	bf00      	nop
 8008180:	080081b1 	.word	0x080081b1
 8008184:	08008227 	.word	0x08008227
 8008188:	08008219 	.word	0x08008219
 800818c:	08008219 	.word	0x08008219
 8008190:	08008219 	.word	0x08008219
 8008194:	08008219 	.word	0x08008219
 8008198:	08008219 	.word	0x08008219
 800819c:	08008219 	.word	0x08008219
 80081a0:	08008219 	.word	0x08008219
 80081a4:	08008219 	.word	0x08008219
 80081a8:	080081d9 	.word	0x080081d9
 80081ac:	08008201 	.word	0x08008201
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d107      	bne.n	80081ca <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	2202      	movs	r2, #2
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fa53 	bl	800966e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081c8:	e030      	b.n	800822c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f9dd 	bl	800958c <USBD_CtlError>
        ret = USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	75fb      	strb	r3, [r7, #23]
      break;
 80081d6:	e029      	b.n	800822c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d107      	bne.n	80081f2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081e2:	f107 030f 	add.w	r3, r7, #15
 80081e6:	2201      	movs	r2, #1
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fa3f 	bl	800966e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081f0:	e01c      	b.n	800822c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f9c9 	bl	800958c <USBD_CtlError>
        ret = USBD_FAIL;
 80081fa:	2303      	movs	r3, #3
 80081fc:	75fb      	strb	r3, [r7, #23]
      break;
 80081fe:	e015      	b.n	800822c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	2b03      	cmp	r3, #3
 8008208:	d00f      	beq.n	800822a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 f9bd 	bl	800958c <USBD_CtlError>
        ret = USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008216:	e008      	b.n	800822a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f9b6 	bl	800958c <USBD_CtlError>
      ret = USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	75fb      	strb	r3, [r7, #23]
      break;
 8008224:	e002      	b.n	800822c <USBD_CDC_Setup+0x15c>
      break;
 8008226:	bf00      	nop
 8008228:	e008      	b.n	800823c <USBD_CDC_Setup+0x16c>
      break;
 800822a:	bf00      	nop
    }
    break;
 800822c:	e006      	b.n	800823c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f001 f9ab 	bl	800958c <USBD_CtlError>
    ret = USBD_FAIL;
 8008236:	2303      	movs	r3, #3
 8008238:	75fb      	strb	r3, [r7, #23]
    break;
 800823a:	bf00      	nop
  }

  return (uint8_t)ret;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop

08008248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800825a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	e049      	b.n	80082fe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008270:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008272:	78fa      	ldrb	r2, [r7, #3]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	3318      	adds	r3, #24
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d029      	beq.n	80082dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008288:	78fa      	ldrb	r2, [r7, #3]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	3318      	adds	r3, #24
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	78f9      	ldrb	r1, [r7, #3]
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	460b      	mov	r3, r1
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	1a5b      	subs	r3, r3, r1
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4403      	add	r3, r0
 80082a8:	3344      	adds	r3, #68	; 0x44
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80082b0:	fb03 f301 	mul.w	r3, r3, r1
 80082b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d110      	bne.n	80082dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3318      	adds	r3, #24
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082ce:	78f9      	ldrb	r1, [r7, #3]
 80082d0:	2300      	movs	r3, #0
 80082d2:	2200      	movs	r2, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fef4 	bl	800a0c2 <USBD_LL_Transmit>
 80082da:	e00f      	b.n	80082fc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008318:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e015      	b.n	8008354 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 ff0a 	bl	800a146 <USBD_LL_GetRxDataSize>
 8008332:	4602      	mov	r2, r0
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800834e:	4611      	mov	r1, r2
 8008350:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d015      	beq.n	80083a2 <USBD_CDC_EP0_RxReady+0x46>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800837c:	2bff      	cmp	r3, #255	; 0xff
 800837e:	d010      	beq.n	80083a2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800838e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008396:	b292      	uxth	r2, r2
 8008398:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	22ff      	movs	r2, #255	; 0xff
 800839e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2243      	movs	r2, #67	; 0x43
 80083b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80083ba:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	24000098 	.word	0x24000098

080083cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2243      	movs	r2, #67	; 0x43
 80083d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80083da:	4b03      	ldr	r3, [pc, #12]	; (80083e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	24000054 	.word	0x24000054

080083ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2243      	movs	r2, #67	; 0x43
 80083f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80083fa:	4b03      	ldr	r3, [pc, #12]	; (8008408 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	240000dc 	.word	0x240000dc

0800840c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	220a      	movs	r2, #10
 8008418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800841a:	4b03      	ldr	r3, [pc, #12]	; (8008428 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800841c:	4618      	mov	r0, r3
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	24000010 	.word	0x24000010

0800842c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e004      	b.n	800844a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008456:	b480      	push	{r7}
 8008458:	b087      	sub	sp, #28
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008468:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	371c      	adds	r7, #28
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008498:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80084c0:	2301      	movs	r3, #1
 80084c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e01a      	b.n	8008508 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d114      	bne.n	8008506 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2201      	movs	r2, #1
 80084e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084fa:	2181      	movs	r1, #129	; 0x81
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 fde0 	bl	800a0c2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800851e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800852a:	2303      	movs	r3, #3
 800852c:	e016      	b.n	800855c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7c1b      	ldrb	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800853c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008540:	2101      	movs	r1, #1
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fdde 	bl	800a104 <USBD_LL_PrepareReceive>
 8008548:	e007      	b.n	800855a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2101      	movs	r1, #1
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 fdd5 	bl	800a104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	e025      	b.n	80085c8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	79fa      	ldrb	r2, [r7, #7]
 80085ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fc47 	bl	8009e50 <USBD_LL_Init>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e010      	b.n	800860a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	f107 020e 	add.w	r2, r7, #14
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fc68 	bl	8009ef0 <USBD_LL_Start>
 8008620:	4603      	mov	r3, r0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	78fa      	ldrb	r2, [r7, #3]
 8008664:	4611      	mov	r1, r2
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	4611      	mov	r1, r2
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
  }

  return USBD_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 ff2c 	bl	8009518 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086ce:	461a      	mov	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d00e      	beq.n	8008702 <USBD_LL_SetupStage+0x5a>
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d302      	bcc.n	80086ee <USBD_LL_SetupStage+0x46>
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d014      	beq.n	8008716 <USBD_LL_SetupStage+0x6e>
 80086ec:	e01d      	b.n	800872a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa18 	bl	8008b2c <USBD_StdDevReq>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008700:	e020      	b.n	8008744 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa7c 	bl	8008c08 <USBD_StdItfReq>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e016      	b.n	8008744 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fab8 	bl	8008c94 <USBD_StdEPReq>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
      break;
 8008728:	e00c      	b.n	8008744 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008734:	b2db      	uxtb	r3, r3
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fc39 	bl	8009fb0 <USBD_LL_StallEP>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
      break;
 8008742:	bf00      	nop
  }

  return ret;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	460b      	mov	r3, r1
 8008758:	607a      	str	r2, [r7, #4]
 800875a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800875c:	7afb      	ldrb	r3, [r7, #11]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d137      	bne.n	80087d2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008768:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008770:	2b03      	cmp	r3, #3
 8008772:	d14a      	bne.n	800880a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	429a      	cmp	r2, r3
 800877e:	d913      	bls.n	80087a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	68da      	ldr	r2, [r3, #12]
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	4293      	cmp	r3, r2
 8008798:	bf28      	it	cs
 800879a:	4613      	movcs	r3, r2
 800879c:	461a      	mov	r2, r3
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 ffad 	bl	8009700 <USBD_CtlContinueRx>
 80087a6:	e030      	b.n	800880a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d105      	bne.n	80087ca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 ffa9 	bl	8009722 <USBD_CtlSendStatus>
 80087d0:	e01b      	b.n	800880a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d013      	beq.n	8008806 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d10e      	bne.n	8008806 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	7afa      	ldrb	r2, [r7, #11]
 80087f2:	4611      	mov	r1, r2
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	4798      	blx	r3
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	e002      	b.n	800880c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008806:	2303      	movs	r3, #3
 8008808:	e000      	b.n	800880c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	460b      	mov	r3, r1
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008822:	7afb      	ldrb	r3, [r7, #11]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d16a      	bne.n	80088fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3314      	adds	r3, #20
 800882c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008834:	2b02      	cmp	r3, #2
 8008836:	d155      	bne.n	80088e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	689a      	ldr	r2, [r3, #8]
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	429a      	cmp	r2, r3
 8008842:	d914      	bls.n	800886e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	1ad2      	subs	r2, r2, r3
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	461a      	mov	r2, r3
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 ff22 	bl	80096a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008860:	2300      	movs	r3, #0
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f001 fc4c 	bl	800a104 <USBD_LL_PrepareReceive>
 800886c:	e03a      	b.n	80088e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	429a      	cmp	r2, r3
 8008878:	d11c      	bne.n	80088b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	685a      	ldr	r2, [r3, #4]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008882:	429a      	cmp	r2, r3
 8008884:	d316      	bcc.n	80088b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008890:	429a      	cmp	r2, r3
 8008892:	d20f      	bcs.n	80088b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008894:	2200      	movs	r2, #0
 8008896:	2100      	movs	r1, #0
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f000 ff03 	bl	80096a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a6:	2300      	movs	r3, #0
 80088a8:	2200      	movs	r2, #0
 80088aa:	2100      	movs	r1, #0
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f001 fc29 	bl	800a104 <USBD_LL_PrepareReceive>
 80088b2:	e017      	b.n	80088e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00a      	beq.n	80088d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d105      	bne.n	80088d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f001 fb69 	bl	8009fb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 ff32 	bl	8009748 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d123      	bne.n	8008936 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7ff fe9b 	bl	800862a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088fc:	e01b      	b.n	8008936 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d013      	beq.n	8008932 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008910:	2b03      	cmp	r3, #3
 8008912:	d10e      	bne.n	8008932 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	7afa      	ldrb	r2, [r7, #11]
 800891e:	4611      	mov	r1, r2
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	4798      	blx	r3
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	e002      	b.n	8008938 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008932:	2303      	movs	r3, #3
 8008934:	e000      	b.n	8008938 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6852      	ldr	r2, [r2, #4]
 800897c:	b2d2      	uxtb	r2, r2
 800897e:	4611      	mov	r1, r2
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 facb 	bl	8009f26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2240      	movs	r2, #64	; 0x40
 800899c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	2200      	movs	r2, #0
 80089a4:	2180      	movs	r1, #128	; 0x80
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fabd 	bl	8009f26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2240      	movs	r2, #64	; 0x40
 80089b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	78fa      	ldrb	r2, [r7, #3]
 80089d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2204      	movs	r2, #4
 80089fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	2b04      	cmp	r3, #4
 8008a1c:	d105      	bne.n	8008a2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d10b      	bne.n	8008a62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d005      	beq.n	8008a62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	370c      	adds	r7, #12
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6852      	ldr	r2, [r2, #4]
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	4611      	mov	r1, r2
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	4798      	blx	r3
  }

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b087      	sub	sp, #28
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	3301      	adds	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b0c:	8a3b      	ldrh	r3, [r7, #16]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	b21a      	sxth	r2, r3
 8008b12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
	...

08008b2c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d004      	beq.n	8008b50 <USBD_StdDevReq+0x24>
 8008b46:	2b40      	cmp	r3, #64	; 0x40
 8008b48:	d002      	beq.n	8008b50 <USBD_StdDevReq+0x24>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <USBD_StdDevReq+0x38>
 8008b4e:	e050      	b.n	8008bf2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73fb      	strb	r3, [r7, #15]
    break;
 8008b62:	e04b      	b.n	8008bfc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	785b      	ldrb	r3, [r3, #1]
 8008b68:	2b09      	cmp	r3, #9
 8008b6a:	d83c      	bhi.n	8008be6 <USBD_StdDevReq+0xba>
 8008b6c:	a201      	add	r2, pc, #4	; (adr r2, 8008b74 <USBD_StdDevReq+0x48>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008bc9 	.word	0x08008bc9
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008be7 	.word	0x08008be7
 8008b80:	08008bd3 	.word	0x08008bd3
 8008b84:	08008be7 	.word	0x08008be7
 8008b88:	08008ba7 	.word	0x08008ba7
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008be7 	.word	0x08008be7
 8008b94:	08008bbf 	.word	0x08008bbf
 8008b98:	08008bb1 	.word	0x08008bb1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9ce 	bl	8008f40 <USBD_GetDescriptor>
      break;
 8008ba4:	e024      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fb33 	bl	8009214 <USBD_SetAddress>
      break;
 8008bae:	e01f      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fb70 	bl	8009298 <USBD_SetConfig>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73fb      	strb	r3, [r7, #15]
      break;
 8008bbc:	e018      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fc0d 	bl	80093e0 <USBD_GetConfig>
      break;
 8008bc6:	e013      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fc3c 	bl	8009448 <USBD_GetStatus>
      break;
 8008bd0:	e00e      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc6a 	bl	80094ae <USBD_SetFeature>
      break;
 8008bda:	e009      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fc79 	bl	80094d6 <USBD_ClrFeature>
      break;
 8008be4:	e004      	b.n	8008bf0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fccf 	bl	800958c <USBD_CtlError>
      break;
 8008bee:	bf00      	nop
    }
    break;
 8008bf0:	e004      	b.n	8008bfc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fcc9 	bl	800958c <USBD_CtlError>
    break;
 8008bfa:	bf00      	nop
  }

  return ret;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop

08008c08 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c12:	2300      	movs	r3, #0
 8008c14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d003      	beq.n	8008c2a <USBD_StdItfReq+0x22>
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	d001      	beq.n	8008c2a <USBD_StdItfReq+0x22>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d12a      	bne.n	8008c80 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	3b01      	subs	r3, #1
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d81d      	bhi.n	8008c72 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	889b      	ldrh	r3, [r3, #4]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d813      	bhi.n	8008c68 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	4798      	blx	r3
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	88db      	ldrh	r3, [r3, #6]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <USBD_StdItfReq+0x74>
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10d      	bne.n	8008c7c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fd5e 	bl	8009722 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008c66:	e009      	b.n	8008c7c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc8e 	bl	800958c <USBD_CtlError>
      break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc89 	bl	800958c <USBD_CtlError>
      break;
 8008c7a:	e000      	b.n	8008c7e <USBD_StdItfReq+0x76>
      break;
 8008c7c:	bf00      	nop
    }
    break;
 8008c7e:	e004      	b.n	8008c8a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc82 	bl	800958c <USBD_CtlError>
    break;
 8008c88:	bf00      	nop
  }

  return ret;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	889b      	ldrh	r3, [r3, #4]
 8008ca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d004      	beq.n	8008cbe <USBD_StdEPReq+0x2a>
 8008cb4:	2b40      	cmp	r3, #64	; 0x40
 8008cb6:	d002      	beq.n	8008cbe <USBD_StdEPReq+0x2a>
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <USBD_StdEPReq+0x3e>
 8008cbc:	e135      	b.n	8008f2a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd0:	e130      	b.n	8008f34 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d03e      	beq.n	8008d58 <USBD_StdEPReq+0xc4>
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d002      	beq.n	8008ce4 <USBD_StdEPReq+0x50>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d077      	beq.n	8008dd2 <USBD_StdEPReq+0x13e>
 8008ce2:	e11c      	b.n	8008f1e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d002      	beq.n	8008cf4 <USBD_StdEPReq+0x60>
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d015      	beq.n	8008d1e <USBD_StdEPReq+0x8a>
 8008cf2:	e02b      	b.n	8008d4c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00c      	beq.n	8008d14 <USBD_StdEPReq+0x80>
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d009      	beq.n	8008d14 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f953 	bl	8009fb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d0a:	2180      	movs	r1, #128	; 0x80
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 f94f 	bl	8009fb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d12:	e020      	b.n	8008d56 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fc38 	bl	800958c <USBD_CtlError>
        break;
 8008d1c:	e01b      	b.n	8008d56 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10e      	bne.n	8008d44 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <USBD_StdEPReq+0xb0>
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b80      	cmp	r3, #128	; 0x80
 8008d30:	d008      	beq.n	8008d44 <USBD_StdEPReq+0xb0>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	88db      	ldrh	r3, [r3, #6]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f001 f936 	bl	8009fb0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fcec 	bl	8009722 <USBD_CtlSendStatus>

        break;
 8008d4a:	e004      	b.n	8008d56 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fc1c 	bl	800958c <USBD_CtlError>
        break;
 8008d54:	bf00      	nop
      }
      break;
 8008d56:	e0e7      	b.n	8008f28 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d002      	beq.n	8008d68 <USBD_StdEPReq+0xd4>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d015      	beq.n	8008d92 <USBD_StdEPReq+0xfe>
 8008d66:	e02d      	b.n	8008dc4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00c      	beq.n	8008d88 <USBD_StdEPReq+0xf4>
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b80      	cmp	r3, #128	; 0x80
 8008d72:	d009      	beq.n	8008d88 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 f919 	bl	8009fb0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d7e:	2180      	movs	r1, #128	; 0x80
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 f915 	bl	8009fb0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d86:	e023      	b.n	8008dd0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fbfe 	bl	800958c <USBD_CtlError>
        break;
 8008d90:	e01e      	b.n	8008dd0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d119      	bne.n	8008dce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f001 f920 	bl	8009fee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fcb7 	bl	8009722 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
        }
        break;
 8008dc2:	e004      	b.n	8008dce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fbe0 	bl	800958c <USBD_CtlError>
        break;
 8008dcc:	e000      	b.n	8008dd0 <USBD_StdEPReq+0x13c>
        break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e0aa      	b.n	8008f28 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d002      	beq.n	8008de2 <USBD_StdEPReq+0x14e>
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d032      	beq.n	8008e46 <USBD_StdEPReq+0x1b2>
 8008de0:	e097      	b.n	8008f12 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d007      	beq.n	8008df8 <USBD_StdEPReq+0x164>
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	2b80      	cmp	r3, #128	; 0x80
 8008dec:	d004      	beq.n	8008df8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fbcb 	bl	800958c <USBD_CtlError>
          break;
 8008df6:	e091      	b.n	8008f1c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da0b      	bge.n	8008e18 <USBD_StdEPReq+0x184>
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	3310      	adds	r3, #16
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	3304      	adds	r3, #4
 8008e16:	e00b      	b.n	8008e30 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3304      	adds	r3, #4
 8008e30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fc15 	bl	800966e <USBD_CtlSendData>
        break;
 8008e44:	e06a      	b.n	8008f1c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da11      	bge.n	8008e72 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	f003 020f 	and.w	r2, r3, #15
 8008e54:	6879      	ldr	r1, [r7, #4]
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	440b      	add	r3, r1
 8008e60:	3324      	adds	r3, #36	; 0x24
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d117      	bne.n	8008e98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fb8e 	bl	800958c <USBD_CtlError>
            break;
 8008e70:	e054      	b.n	8008f1c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	f003 020f 	and.w	r2, r3, #15
 8008e78:	6879      	ldr	r1, [r7, #4]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb7b 	bl	800958c <USBD_CtlError>
            break;
 8008e96:	e041      	b.n	8008f1c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da0b      	bge.n	8008eb8 <USBD_StdEPReq+0x224>
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	3310      	adds	r3, #16
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	e00b      	b.n	8008ed0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	4413      	add	r3, r2
 8008ece:	3304      	adds	r3, #4
 8008ed0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <USBD_StdEPReq+0x24a>
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b80      	cmp	r3, #128	; 0x80
 8008edc:	d103      	bne.n	8008ee6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	e00e      	b.n	8008f04 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f89e 	bl	800a02c <USBD_LL_IsStallEP>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	e002      	b.n	8008f04 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2202      	movs	r2, #2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fbaf 	bl	800966e <USBD_CtlSendData>
          break;
 8008f10:	e004      	b.n	8008f1c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fb39 	bl	800958c <USBD_CtlError>
        break;
 8008f1a:	bf00      	nop
      }
      break;
 8008f1c:	e004      	b.n	8008f28 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fb33 	bl	800958c <USBD_CtlError>
      break;
 8008f26:	bf00      	nop
    }
    break;
 8008f28:	e004      	b.n	8008f34 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 fb2d 	bl	800958c <USBD_CtlError>
    break;
 8008f32:	bf00      	nop
  }

  return ret;
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	885b      	ldrh	r3, [r3, #2]
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	2b06      	cmp	r3, #6
 8008f62:	f200 8128 	bhi.w	80091b6 <USBD_GetDescriptor+0x276>
 8008f66:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <USBD_GetDescriptor+0x2c>)
 8008f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008fa1 	.word	0x08008fa1
 8008f74:	08008fe1 	.word	0x08008fe1
 8008f78:	080091b7 	.word	0x080091b7
 8008f7c:	080091b7 	.word	0x080091b7
 8008f80:	08009157 	.word	0x08009157
 8008f84:	08009183 	.word	0x08009183
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	7c12      	ldrb	r2, [r2, #16]
 8008f94:	f107 0108 	add.w	r1, r7, #8
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	60f8      	str	r0, [r7, #12]
    break;
 8008f9e:	e112      	b.n	80091c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	7c1b      	ldrb	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10d      	bne.n	8008fc4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f107 0208 	add.w	r2, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008fc2:	e100      	b.n	80091c6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fcc:	f107 0208 	add.w	r2, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	2202      	movs	r2, #2
 8008fdc:	701a      	strb	r2, [r3, #0]
    break;
 8008fde:	e0f2      	b.n	80091c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	885b      	ldrh	r3, [r3, #2]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	f200 80ac 	bhi.w	8009144 <USBD_GetDescriptor+0x204>
 8008fec:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <USBD_GetDescriptor+0xb4>)
 8008fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff2:	bf00      	nop
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	08009041 	.word	0x08009041
 8008ffc:	08009075 	.word	0x08009075
 8009000:	080090a9 	.word	0x080090a9
 8009004:	080090dd 	.word	0x080090dd
 8009008:	08009111 	.word	0x08009111
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800902e:	e091      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 faaa 	bl	800958c <USBD_CtlError>
        err++;
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	3301      	adds	r3, #1
 800903c:	72fb      	strb	r3, [r7, #11]
      break;
 800903e:	e089      	b.n	8009154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009062:	e077      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa90 	bl	800958c <USBD_CtlError>
        err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
      break;
 8009072:	e06f      	b.n	8009154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009096:	e05d      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa76 	bl	800958c <USBD_CtlError>
        err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
      break;
 80090a6:	e055      	b.n	8009154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090ca:	e043      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa5c 	bl	800958c <USBD_CtlError>
        err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
      break;
 80090da:	e03b      	b.n	8009154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7c12      	ldrb	r2, [r2, #16]
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090fe:	e029      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa42 	bl	800958c <USBD_CtlError>
        err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
      break;
 800910e:	e021      	b.n	8009154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	7c12      	ldrb	r2, [r2, #16]
 8009128:	f107 0108 	add.w	r1, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009132:	e00f      	b.n	8009154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fa28 	bl	800958c <USBD_CtlError>
        err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
      break;
 8009142:	e007      	b.n	8009154 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa20 	bl	800958c <USBD_CtlError>
      err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009152:	bf00      	nop
    }
    break;
 8009154:	e037      	b.n	80091c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7c1b      	ldrb	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d109      	bne.n	8009172 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	f107 0208 	add.w	r2, r7, #8
 800916a:	4610      	mov	r0, r2
 800916c:	4798      	blx	r3
 800916e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009170:	e029      	b.n	80091c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fa09 	bl	800958c <USBD_CtlError>
      err++;
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	3301      	adds	r3, #1
 800917e:	72fb      	strb	r3, [r7, #11]
    break;
 8009180:	e021      	b.n	80091c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7c1b      	ldrb	r3, [r3, #16]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10d      	bne.n	80091a6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	f107 0208 	add.w	r2, r7, #8
 8009196:	4610      	mov	r0, r2
 8009198:	4798      	blx	r3
 800919a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	3301      	adds	r3, #1
 80091a0:	2207      	movs	r2, #7
 80091a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80091a4:	e00f      	b.n	80091c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f9ef 	bl	800958c <USBD_CtlError>
      err++;
 80091ae:	7afb      	ldrb	r3, [r7, #11]
 80091b0:	3301      	adds	r3, #1
 80091b2:	72fb      	strb	r3, [r7, #11]
    break;
 80091b4:	e007      	b.n	80091c6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f9e7 	bl	800958c <USBD_CtlError>
    err++;
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3301      	adds	r3, #1
 80091c2:	72fb      	strb	r3, [r7, #11]
    break;
 80091c4:	bf00      	nop
  }

  if (err != 0U)
 80091c6:	7afb      	ldrb	r3, [r7, #11]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11e      	bne.n	800920a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	88db      	ldrh	r3, [r3, #6]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d016      	beq.n	8009202 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80091d4:	893b      	ldrh	r3, [r7, #8]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00e      	beq.n	80091f8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	88da      	ldrh	r2, [r3, #6]
 80091de:	893b      	ldrh	r3, [r7, #8]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bf28      	it	cs
 80091e4:	4613      	movcs	r3, r2
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ea:	893b      	ldrh	r3, [r7, #8]
 80091ec:	461a      	mov	r2, r3
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fa3c 	bl	800966e <USBD_CtlSendData>
 80091f6:	e009      	b.n	800920c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9c6 	bl	800958c <USBD_CtlError>
 8009200:	e004      	b.n	800920c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa8d 	bl	8009722 <USBD_CtlSendStatus>
 8009208:	e000      	b.n	800920c <USBD_GetDescriptor+0x2cc>
    return;
 800920a:	bf00      	nop
    }
  }
}
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop

08009214 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	889b      	ldrh	r3, [r3, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d130      	bne.n	8009288 <USBD_SetAddress+0x74>
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	88db      	ldrh	r3, [r3, #6]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d12c      	bne.n	8009288 <USBD_SetAddress+0x74>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	2b7f      	cmp	r3, #127	; 0x7f
 8009234:	d828      	bhi.n	8009288 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	2b03      	cmp	r3, #3
 800924a:	d104      	bne.n	8009256 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f99c 	bl	800958c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	e01c      	b.n	8009290 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7bfa      	ldrb	r2, [r7, #15]
 800925a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 ff0e 	bl	800a084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa5a 	bl	8009722 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927c:	e008      	b.n	8009290 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	e003      	b.n	8009290 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f97e 	bl	800958c <USBD_CtlError>
  }
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	885b      	ldrh	r3, [r3, #2]
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	4b4b      	ldr	r3, [pc, #300]	; (80093dc <USBD_SetConfig+0x144>)
 80092ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092b0:	4b4a      	ldr	r3, [pc, #296]	; (80093dc <USBD_SetConfig+0x144>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d905      	bls.n	80092c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f966 	bl	800958c <USBD_CtlError>
    return USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	e087      	b.n	80093d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d002      	beq.n	80092d4 <USBD_SetConfig+0x3c>
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d025      	beq.n	800931e <USBD_SetConfig+0x86>
 80092d2:	e071      	b.n	80093b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80092d4:	4b41      	ldr	r3, [pc, #260]	; (80093dc <USBD_SetConfig+0x144>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01c      	beq.n	8009316 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80092dc:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <USBD_SetConfig+0x144>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092e6:	4b3d      	ldr	r3, [pc, #244]	; (80093dc <USBD_SetConfig+0x144>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff f9a7 	bl	8008640 <USBD_SetClassConfig>
 80092f2:	4603      	mov	r3, r0
 80092f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f944 	bl	800958c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009304:	e065      	b.n	80093d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa0b 	bl	8009722 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2203      	movs	r2, #3
 8009310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009314:	e05d      	b.n	80093d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa03 	bl	8009722 <USBD_CtlSendStatus>
    break;
 800931c:	e059      	b.n	80093d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800931e:	4b2f      	ldr	r3, [pc, #188]	; (80093dc <USBD_SetConfig+0x144>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d112      	bne.n	800934c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800932e:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <USBD_SetConfig+0x144>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <USBD_SetConfig+0x144>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff f99a 	bl	8008678 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f9ec 	bl	8009722 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800934a:	e042      	b.n	80093d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800934c:	4b23      	ldr	r3, [pc, #140]	; (80093dc <USBD_SetConfig+0x144>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d02a      	beq.n	80093b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff f988 	bl	8008678 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009368:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <USBD_SetConfig+0x144>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	461a      	mov	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009372:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <USBD_SetConfig+0x144>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff f961 	bl	8008640 <USBD_SetClassConfig>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00f      	beq.n	80093a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f8fe 	bl	800958c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff f96d 	bl	8008678 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80093a6:	e014      	b.n	80093d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f9ba 	bl	8009722 <USBD_CtlSendStatus>
    break;
 80093ae:	e010      	b.n	80093d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f9b6 	bl	8009722 <USBD_CtlSendStatus>
    break;
 80093b6:	e00c      	b.n	80093d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8e6 	bl	800958c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <USBD_SetConfig+0x144>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff f956 	bl	8008678 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
    break;
 80093d0:	bf00      	nop
  }

  return ret;
 80093d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	240002c8 	.word	0x240002c8

080093e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	88db      	ldrh	r3, [r3, #6]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d004      	beq.n	80093fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f8c9 	bl	800958c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80093fa:	e021      	b.n	8009440 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009402:	2b01      	cmp	r3, #1
 8009404:	db17      	blt.n	8009436 <USBD_GetConfig+0x56>
 8009406:	2b02      	cmp	r3, #2
 8009408:	dd02      	ble.n	8009410 <USBD_GetConfig+0x30>
 800940a:	2b03      	cmp	r3, #3
 800940c:	d00b      	beq.n	8009426 <USBD_GetConfig+0x46>
 800940e:	e012      	b.n	8009436 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3308      	adds	r3, #8
 800941a:	2201      	movs	r2, #1
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f925 	bl	800966e <USBD_CtlSendData>
      break;
 8009424:	e00c      	b.n	8009440 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3304      	adds	r3, #4
 800942a:	2201      	movs	r2, #1
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f91d 	bl	800966e <USBD_CtlSendData>
      break;
 8009434:	e004      	b.n	8009440 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8a7 	bl	800958c <USBD_CtlError>
      break;
 800943e:	bf00      	nop
}
 8009440:	bf00      	nop
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	3b01      	subs	r3, #1
 800945a:	2b02      	cmp	r3, #2
 800945c:	d81e      	bhi.n	800949c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	88db      	ldrh	r3, [r3, #6]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d004      	beq.n	8009470 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f88f 	bl	800958c <USBD_CtlError>
      break;
 800946e:	e01a      	b.n	80094a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f043 0202 	orr.w	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	330c      	adds	r3, #12
 8009490:	2202      	movs	r2, #2
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f8ea 	bl	800966e <USBD_CtlSendData>
    break;
 800949a:	e004      	b.n	80094a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f874 	bl	800958c <USBD_CtlError>
    break;
 80094a4:	bf00      	nop
  }
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d106      	bne.n	80094ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f92a 	bl	8009722 <USBD_CtlSendStatus>
  }
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d80b      	bhi.n	8009504 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	885b      	ldrh	r3, [r3, #2]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d10c      	bne.n	800950e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f910 	bl	8009722 <USBD_CtlSendStatus>
      }
      break;
 8009502:	e004      	b.n	800950e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f840 	bl	800958c <USBD_CtlError>
      break;
 800950c:	e000      	b.n	8009510 <USBD_ClrFeature+0x3a>
      break;
 800950e:	bf00      	nop
  }
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	781a      	ldrb	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3301      	adds	r3, #1
 8009540:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fad3 	bl	8008aee <SWAPBYTE>
 8009548:	4603      	mov	r3, r0
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff fac6 	bl	8008aee <SWAPBYTE>
 8009562:	4603      	mov	r3, r0
 8009564:	461a      	mov	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff fab9 	bl	8008aee <SWAPBYTE>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	80da      	strh	r2, [r3, #6]
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009596:	2180      	movs	r1, #128	; 0x80
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fd09 	bl	8009fb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800959e:	2100      	movs	r1, #0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fd05 	bl	8009fb0 <USBD_LL_StallEP>
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b086      	sub	sp, #24
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d036      	beq.n	8009632 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095c8:	6938      	ldr	r0, [r7, #16]
 80095ca:	f000 f836 	bl	800963a <USBD_GetLen>
 80095ce:	4603      	mov	r3, r0
 80095d0:	3301      	adds	r3, #1
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	3301      	adds	r3, #1
 80095ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4413      	add	r3, r2
 80095f4:	2203      	movs	r2, #3
 80095f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	3301      	adds	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095fe:	e013      	b.n	8009628 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4413      	add	r3, r2
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	7812      	ldrb	r2, [r2, #0]
 800960a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	3301      	adds	r3, #1
 8009610:	613b      	str	r3, [r7, #16]
    idx++;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	3301      	adds	r3, #1
 8009616:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	4413      	add	r3, r2
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
    idx++;
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	3301      	adds	r3, #1
 8009626:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e7      	bne.n	8009600 <USBD_GetString+0x52>
 8009630:	e000      	b.n	8009634 <USBD_GetString+0x86>
    return;
 8009632:	bf00      	nop
  }
}
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800964a:	e005      	b.n	8009658 <USBD_GetLen+0x1e>
  {
    len++;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	3301      	adds	r3, #1
 8009650:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	3301      	adds	r3, #1
 8009656:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f5      	bne.n	800964c <USBD_GetLen+0x12>
  }

  return len;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	60f8      	str	r0, [r7, #12]
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2202      	movs	r2, #2
 800967e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	2100      	movs	r1, #0
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fd14 	bl	800a0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fd03 	bl	800a0c2 <USBD_LL_Transmit>

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	60f8      	str	r0, [r7, #12]
 80096ce:	60b9      	str	r1, [r7, #8]
 80096d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2203      	movs	r2, #3
 80096d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	2100      	movs	r1, #0
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fd07 	bl	800a104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	2100      	movs	r1, #0
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fcf6 	bl	800a104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2204      	movs	r2, #4
 800972e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fcc2 	bl	800a0c2 <USBD_LL_Transmit>

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2205      	movs	r2, #5
 8009754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009758:	2300      	movs	r3, #0
 800975a:	2200      	movs	r2, #0
 800975c:	2100      	movs	r1, #0
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fcd0 	bl	800a104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3708      	adds	r7, #8
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009774:	2200      	movs	r2, #0
 8009776:	4913      	ldr	r1, [pc, #76]	; (80097c4 <MX_USB_DEVICE_Init+0x54>)
 8009778:	4813      	ldr	r0, [pc, #76]	; (80097c8 <MX_USB_DEVICE_Init+0x58>)
 800977a:	f7fe fef3 	bl	8008564 <USBD_Init>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009784:	f7f7 f9f4 	bl	8000b70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009788:	4910      	ldr	r1, [pc, #64]	; (80097cc <MX_USB_DEVICE_Init+0x5c>)
 800978a:	480f      	ldr	r0, [pc, #60]	; (80097c8 <MX_USB_DEVICE_Init+0x58>)
 800978c:	f7fe ff20 	bl	80085d0 <USBD_RegisterClass>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009796:	f7f7 f9eb 	bl	8000b70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800979a:	490d      	ldr	r1, [pc, #52]	; (80097d0 <MX_USB_DEVICE_Init+0x60>)
 800979c:	480a      	ldr	r0, [pc, #40]	; (80097c8 <MX_USB_DEVICE_Init+0x58>)
 800979e:	f7fe fe45 	bl	800842c <USBD_CDC_RegisterInterface>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097a8:	f7f7 f9e2 	bl	8000b70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097ac:	4806      	ldr	r0, [pc, #24]	; (80097c8 <MX_USB_DEVICE_Init+0x58>)
 80097ae:	f7fe ff30 	bl	8008612 <USBD_Start>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097b8:	f7f7 f9da 	bl	8000b70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80097bc:	f7f9 fd84 	bl	80032c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80097c0:	bf00      	nop
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	24000134 	.word	0x24000134
 80097c8:	2400040c 	.word	0x2400040c
 80097cc:	2400001c 	.word	0x2400001c
 80097d0:	24000120 	.word	0x24000120

080097d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097d8:	2200      	movs	r2, #0
 80097da:	4905      	ldr	r1, [pc, #20]	; (80097f0 <CDC_Init_FS+0x1c>)
 80097dc:	4805      	ldr	r0, [pc, #20]	; (80097f4 <CDC_Init_FS+0x20>)
 80097de:	f7fe fe3a 	bl	8008456 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097e2:	4905      	ldr	r1, [pc, #20]	; (80097f8 <CDC_Init_FS+0x24>)
 80097e4:	4803      	ldr	r0, [pc, #12]	; (80097f4 <CDC_Init_FS+0x20>)
 80097e6:	f7fe fe4f 	bl	8008488 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	24000edc 	.word	0x24000edc
 80097f4:	2400040c 	.word	0x2400040c
 80097f8:	240006dc 	.word	0x240006dc

080097fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009800:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009802:	4618      	mov	r0, r3
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	71fb      	strb	r3, [r7, #7]
 8009818:	4613      	mov	r3, r2
 800981a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	2b23      	cmp	r3, #35	; 0x23
 8009820:	d84a      	bhi.n	80098b8 <CDC_Control_FS+0xac>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <CDC_Control_FS+0x1c>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	080098b9 	.word	0x080098b9
 800982c:	080098b9 	.word	0x080098b9
 8009830:	080098b9 	.word	0x080098b9
 8009834:	080098b9 	.word	0x080098b9
 8009838:	080098b9 	.word	0x080098b9
 800983c:	080098b9 	.word	0x080098b9
 8009840:	080098b9 	.word	0x080098b9
 8009844:	080098b9 	.word	0x080098b9
 8009848:	080098b9 	.word	0x080098b9
 800984c:	080098b9 	.word	0x080098b9
 8009850:	080098b9 	.word	0x080098b9
 8009854:	080098b9 	.word	0x080098b9
 8009858:	080098b9 	.word	0x080098b9
 800985c:	080098b9 	.word	0x080098b9
 8009860:	080098b9 	.word	0x080098b9
 8009864:	080098b9 	.word	0x080098b9
 8009868:	080098b9 	.word	0x080098b9
 800986c:	080098b9 	.word	0x080098b9
 8009870:	080098b9 	.word	0x080098b9
 8009874:	080098b9 	.word	0x080098b9
 8009878:	080098b9 	.word	0x080098b9
 800987c:	080098b9 	.word	0x080098b9
 8009880:	080098b9 	.word	0x080098b9
 8009884:	080098b9 	.word	0x080098b9
 8009888:	080098b9 	.word	0x080098b9
 800988c:	080098b9 	.word	0x080098b9
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098b9 	.word	0x080098b9
 8009898:	080098b9 	.word	0x080098b9
 800989c:	080098b9 	.word	0x080098b9
 80098a0:	080098b9 	.word	0x080098b9
 80098a4:	080098b9 	.word	0x080098b9
 80098a8:	080098b9 	.word	0x080098b9
 80098ac:	080098b9 	.word	0x080098b9
 80098b0:	080098b9 	.word	0x080098b9
 80098b4:	080098b9 	.word	0x080098b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098b8:	bf00      	nop
  }

  return (USBD_OK);
 80098ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098bc:	4618      	mov	r0, r3
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	480f      	ldr	r0, [pc, #60]	; (8009914 <CDC_Receive_FS+0x4c>)
 80098d6:	f7fe fdd7 	bl	8008488 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098da:	480e      	ldr	r0, [pc, #56]	; (8009914 <CDC_Receive_FS+0x4c>)
 80098dc:	f7fe fe18 	bl	8008510 <USBD_CDC_ReceivePacket>

  memcpy(rxdata,Buf,*Len);
 80098e0:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <CDC_Receive_FS+0x50>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	4618      	mov	r0, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	f000 fca3 	bl	800a238 <memcpy>
  rxlen = *Len;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <CDC_Receive_FS+0x54>)
 80098f8:	6013      	str	r3, [r2, #0]

  CDC_Transmit_FS(Buf,*Len);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f80c 	bl	8009920 <CDC_Transmit_FS>

  return (USBD_OK);
 8009908:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	2400040c 	.word	0x2400040c
 8009918:	240002c9 	.word	0x240002c9
 800991c:	240002cc 	.word	0x240002cc

08009920 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009930:	4b0d      	ldr	r3, [pc, #52]	; (8009968 <CDC_Transmit_FS+0x48>)
 8009932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009936:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009942:	2301      	movs	r3, #1
 8009944:	e00b      	b.n	800995e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009946:	887b      	ldrh	r3, [r7, #2]
 8009948:	461a      	mov	r2, r3
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4806      	ldr	r0, [pc, #24]	; (8009968 <CDC_Transmit_FS+0x48>)
 800994e:	f7fe fd82 	bl	8008456 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009952:	4805      	ldr	r0, [pc, #20]	; (8009968 <CDC_Transmit_FS+0x48>)
 8009954:	f7fe fdac 	bl	80084b0 <USBD_CDC_TransmitPacket>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800995c:	7bfb      	ldrb	r3, [r7, #15]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	2400040c 	.word	0x2400040c

0800996c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800997e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009982:	4618      	mov	r0, r3
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2212      	movs	r2, #18
 80099a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099a2:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	24000150 	.word	0x24000150

080099b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	4603      	mov	r3, r0
 80099bc:	6039      	str	r1, [r7, #0]
 80099be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2204      	movs	r2, #4
 80099c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099c6:	4b03      	ldr	r3, [pc, #12]	; (80099d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	24000164 	.word	0x24000164

080099d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4907      	ldr	r1, [pc, #28]	; (8009a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80099ee:	4808      	ldr	r0, [pc, #32]	; (8009a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80099f0:	f7ff fddd 	bl	80095ae <USBD_GetString>
 80099f4:	e004      	b.n	8009a00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	4904      	ldr	r1, [pc, #16]	; (8009a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80099fa:	4805      	ldr	r0, [pc, #20]	; (8009a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80099fc:	f7ff fdd7 	bl	80095ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	240016dc 	.word	0x240016dc
 8009a10:	0800a3fc 	.word	0x0800a3fc

08009a14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	4904      	ldr	r1, [pc, #16]	; (8009a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a24:	4804      	ldr	r0, [pc, #16]	; (8009a38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a26:	f7ff fdc2 	bl	80095ae <USBD_GetString>
  return USBD_StrDesc;
 8009a2a:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	240016dc 	.word	0x240016dc
 8009a38:	0800a414 	.word	0x0800a414

08009a3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	6039      	str	r1, [r7, #0]
 8009a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	221a      	movs	r2, #26
 8009a4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a4e:	f000 f843 	bl	8009ad8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a52:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	24000168 	.word	0x24000168

08009a60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	4907      	ldr	r1, [pc, #28]	; (8009a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a76:	4808      	ldr	r0, [pc, #32]	; (8009a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a78:	f7ff fd99 	bl	80095ae <USBD_GetString>
 8009a7c:	e004      	b.n	8009a88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	4904      	ldr	r1, [pc, #16]	; (8009a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a82:	4805      	ldr	r0, [pc, #20]	; (8009a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a84:	f7ff fd93 	bl	80095ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	240016dc 	.word	0x240016dc
 8009a98:	0800a428 	.word	0x0800a428

08009a9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d105      	bne.n	8009aba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4907      	ldr	r1, [pc, #28]	; (8009ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ab2:	4808      	ldr	r0, [pc, #32]	; (8009ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ab4:	f7ff fd7b 	bl	80095ae <USBD_GetString>
 8009ab8:	e004      	b.n	8009ac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	4904      	ldr	r1, [pc, #16]	; (8009ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ac0:	f7ff fd75 	bl	80095ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ac4:	4b02      	ldr	r3, [pc, #8]	; (8009ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	240016dc 	.word	0x240016dc
 8009ad4:	0800a434 	.word	0x0800a434

08009ad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ade:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <Get_SerialNum+0x44>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ae4:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <Get_SerialNum+0x48>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009aea:	4b0e      	ldr	r3, [pc, #56]	; (8009b24 <Get_SerialNum+0x4c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d009      	beq.n	8009b12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009afe:	2208      	movs	r2, #8
 8009b00:	4909      	ldr	r1, [pc, #36]	; (8009b28 <Get_SerialNum+0x50>)
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f814 	bl	8009b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b08:	2204      	movs	r2, #4
 8009b0a:	4908      	ldr	r1, [pc, #32]	; (8009b2c <Get_SerialNum+0x54>)
 8009b0c:	68b8      	ldr	r0, [r7, #8]
 8009b0e:	f000 f80f 	bl	8009b30 <IntToUnicode>
  }
}
 8009b12:	bf00      	nop
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	1ff1e800 	.word	0x1ff1e800
 8009b20:	1ff1e804 	.word	0x1ff1e804
 8009b24:	1ff1e808 	.word	0x1ff1e808
 8009b28:	2400016a 	.word	0x2400016a
 8009b2c:	2400017a 	.word	0x2400017a

08009b30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b42:	2300      	movs	r3, #0
 8009b44:	75fb      	strb	r3, [r7, #23]
 8009b46:	e027      	b.n	8009b98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0f1b      	lsrs	r3, r3, #28
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d80b      	bhi.n	8009b68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	0f1b      	lsrs	r3, r3, #28
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	440b      	add	r3, r1
 8009b60:	3230      	adds	r2, #48	; 0x30
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e00a      	b.n	8009b7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	0f1b      	lsrs	r3, r3, #28
 8009b6c:	b2da      	uxtb	r2, r3
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4619      	mov	r1, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	440b      	add	r3, r1
 8009b78:	3237      	adds	r2, #55	; 0x37
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	3301      	adds	r3, #1
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	3301      	adds	r3, #1
 8009b96:	75fb      	strb	r3, [r7, #23]
 8009b98:	7dfa      	ldrb	r2, [r7, #23]
 8009b9a:	79fb      	ldrb	r3, [r7, #7]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3d3      	bcc.n	8009b48 <IntToUnicode+0x18>
  }
}
 8009ba0:	bf00      	nop
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08a      	sub	sp, #40	; 0x28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bb4:	f107 0314 	add.w	r3, r7, #20
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	605a      	str	r2, [r3, #4]
 8009bbe:	609a      	str	r2, [r3, #8]
 8009bc0:	60da      	str	r2, [r3, #12]
 8009bc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a25      	ldr	r2, [pc, #148]	; (8009c60 <HAL_PCD_MspInit+0xb4>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d143      	bne.n	8009c56 <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bce:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bd4:	4a23      	ldr	r2, [pc, #140]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009bd6:	f043 0301 	orr.w	r3, r3, #1
 8009bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009be4:	f003 0301 	and.w	r3, r3, #1
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8009bec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8009bfe:	230a      	movs	r3, #10
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c02:	f107 0314 	add.w	r3, r7, #20
 8009c06:	4619      	mov	r1, r3
 8009c08:	4817      	ldr	r0, [pc, #92]	; (8009c68 <HAL_PCD_MspInit+0xbc>)
 8009c0a:	f7f7 ff7f 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1c:	f107 0314 	add.w	r3, r7, #20
 8009c20:	4619      	mov	r1, r3
 8009c22:	4811      	ldr	r0, [pc, #68]	; (8009c68 <HAL_PCD_MspInit+0xbc>)
 8009c24:	f7f7 ff72 	bl	8001b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c28:	4b0e      	ldr	r3, [pc, #56]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c2e:	4a0d      	ldr	r2, [pc, #52]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8009c38:	4b0a      	ldr	r3, [pc, #40]	; (8009c64 <HAL_PCD_MspInit+0xb8>)
 8009c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c46:	2200      	movs	r2, #0
 8009c48:	2100      	movs	r1, #0
 8009c4a:	2065      	movs	r0, #101	; 0x65
 8009c4c:	f7f7 fb13 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c50:	2065      	movs	r0, #101	; 0x65
 8009c52:	f7f7 fb2a 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c56:	bf00      	nop
 8009c58:	3728      	adds	r7, #40	; 0x28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	40080000 	.word	0x40080000
 8009c64:	58024400 	.word	0x58024400
 8009c68:	58020000 	.word	0x58020000

08009c6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c80:	4619      	mov	r1, r3
 8009c82:	4610      	mov	r0, r2
 8009c84:	f7fe fd10 	bl	80086a8 <USBD_LL_SetupStage>
}
 8009c88:	bf00      	nop
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f7fe fd48 	bl	800874e <USBD_LL_DataOutStage>
}
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	00db      	lsls	r3, r3, #3
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	440b      	add	r3, r1
 8009ce6:	3348      	adds	r3, #72	; 0x48
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f7fe fd91 	bl	8008814 <USBD_LL_DataInStage>
}
 8009cf2:	bf00      	nop
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fe95 	bl	8008a38 <USBD_LL_SOF>
}
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]
 8009d2e:	e008      	b.n	8009d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d102      	bne.n	8009d3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
 8009d3c:	e001      	b.n	8009d42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d3e:	f7f6 ff17 	bl	8000b70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d48:	7bfa      	ldrb	r2, [r7, #15]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fe38 	bl	80089c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fdf1 	bl	8008940 <USBD_LL_Reset>
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe fe33 	bl	80089e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d8e:	f043 0301 	orr.w	r3, r3, #1
 8009d92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d9c:	4b04      	ldr	r3, [pc, #16]	; (8009db0 <HAL_PCD_SuspendCallback+0x48>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	4a03      	ldr	r2, [pc, #12]	; (8009db0 <HAL_PCD_SuspendCallback+0x48>)
 8009da2:	f043 0306 	orr.w	r3, r3, #6
 8009da6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	e000ed00 	.word	0xe000ed00

08009db4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fe22 	bl	8008a0c <USBD_LL_Resume>
}
 8009dc8:	bf00      	nop
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009de2:	78fa      	ldrb	r2, [r7, #3]
 8009de4:	4611      	mov	r1, r2
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fe fe4d 	bl	8008a86 <USBD_LL_IsoOUTIncomplete>
}
 8009dec:	bf00      	nop
 8009dee:	3708      	adds	r7, #8
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fe2e 	bl	8008a6c <USBD_LL_IsoINIncomplete>
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fe fe3a 	bl	8008aa0 <USBD_LL_DevConnected>
}
 8009e2c:	bf00      	nop
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe fe37 	bl	8008ab6 <USBD_LL_DevDisconnected>
}
 8009e48:	bf00      	nop
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d13e      	bne.n	8009ede <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009e60:	4a21      	ldr	r2, [pc, #132]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e70:	4b1d      	ldr	r3, [pc, #116]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e72:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <USBD_LL_Init+0x9c>)
 8009e74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009e76:	4b1c      	ldr	r3, [pc, #112]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e78:	2209      	movs	r2, #9
 8009e7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e7e:	2202      	movs	r2, #2
 8009e80:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e82:	4b19      	ldr	r3, [pc, #100]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e88:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009e8e:	4b16      	ldr	r3, [pc, #88]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e94:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009ea0:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009ea6:	4b10      	ldr	r3, [pc, #64]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009eac:	4b0e      	ldr	r3, [pc, #56]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009eb2:	480d      	ldr	r0, [pc, #52]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009eb4:	f7f7 fff3 	bl	8001e9e <HAL_PCD_Init>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009ebe:	f7f6 fe57 	bl	8000b70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	4808      	ldr	r0, [pc, #32]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009ec6:	f7f9 f984 	bl	80031d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009eca:	2240      	movs	r2, #64	; 0x40
 8009ecc:	2100      	movs	r1, #0
 8009ece:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009ed0:	f7f9 f938 	bl	8003144 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ed4:	2280      	movs	r2, #128	; 0x80
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4803      	ldr	r0, [pc, #12]	; (8009ee8 <USBD_LL_Init+0x98>)
 8009eda:	f7f9 f933 	bl	8003144 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	240018dc 	.word	0x240018dc
 8009eec:	40080000 	.word	0x40080000

08009ef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7f8 f8ed 	bl	80020e6 <HAL_PCD_Start>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 f92a 	bl	800a16c <USBD_Get_USB_Status>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	4608      	mov	r0, r1
 8009f30:	4611      	mov	r1, r2
 8009f32:	461a      	mov	r2, r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	70fb      	strb	r3, [r7, #3]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70bb      	strb	r3, [r7, #2]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f4e:	78bb      	ldrb	r3, [r7, #2]
 8009f50:	883a      	ldrh	r2, [r7, #0]
 8009f52:	78f9      	ldrb	r1, [r7, #3]
 8009f54:	f7f8 fcfe 	bl	8002954 <HAL_PCD_EP_Open>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f904 	bl	800a16c <USBD_Get_USB_Status>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f8 fd47 	bl	8002a24 <HAL_PCD_EP_Close>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f000 f8e5 	bl	800a16c <USBD_Get_USB_Status>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f8 fe1f 	bl	8002c12 <HAL_PCD_EP_SetStall>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f8c6 	bl	800a16c <USBD_Get_USB_Status>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a008:	78fa      	ldrb	r2, [r7, #3]
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7f8 fe64 	bl	8002cda <HAL_PCD_EP_ClrStall>
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	4618      	mov	r0, r3
 800a01a:	f000 f8a7 	bl	800a16c <USBD_Get_USB_Status>
 800a01e:	4603      	mov	r3, r0
 800a020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a022:	7bbb      	ldrb	r3, [r7, #14]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a044:	2b00      	cmp	r3, #0
 800a046:	da0b      	bge.n	800a060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	4613      	mov	r3, r2
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	333e      	adds	r3, #62	; 0x3e
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	e00b      	b.n	800a078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a066:	68f9      	ldr	r1, [r7, #12]
 800a068:	4613      	mov	r3, r2
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a09e:	78fa      	ldrb	r2, [r7, #3]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7f8 fc31 	bl	800290a <HAL_PCD_SetAddress>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 f85c 	bl	800a16c <USBD_Get_USB_Status>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b086      	sub	sp, #24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	60f8      	str	r0, [r7, #12]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a0e0:	7af9      	ldrb	r1, [r7, #11]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f7f8 fd4a 	bl	8002b7e <HAL_PCD_EP_Transmit>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f000 f83b 	bl	800a16c <USBD_Get_USB_Status>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	460b      	mov	r3, r1
 800a112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a122:	7af9      	ldrb	r1, [r7, #11]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	f7f8 fcc6 	bl	8002ab8 <HAL_PCD_EP_Receive>
 800a12c:	4603      	mov	r3, r0
 800a12e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f81a 	bl	800a16c <USBD_Get_USB_Status>
 800a138:	4603      	mov	r3, r0
 800a13a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a13c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	460b      	mov	r3, r1
 800a150:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a158:	78fa      	ldrb	r2, [r7, #3]
 800a15a:	4611      	mov	r1, r2
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f8 fcf6 	bl	8002b4e <HAL_PCD_EP_GetRxCount>
 800a162:	4603      	mov	r3, r0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d817      	bhi.n	800a1b0 <USBD_Get_USB_Status+0x44>
 800a180:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <USBD_Get_USB_Status+0x1c>)
 800a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a186:	bf00      	nop
 800a188:	0800a199 	.word	0x0800a199
 800a18c:	0800a19f 	.word	0x0800a19f
 800a190:	0800a1a5 	.word	0x0800a1a5
 800a194:	0800a1ab 	.word	0x0800a1ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]
    break;
 800a19c:	e00b      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a19e:	2303      	movs	r3, #3
 800a1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a2:	e008      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a8:	e005      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a1ae:	e002      	b.n	800a1b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1b4:	bf00      	nop
  }
  return usb_status;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <__errno>:
 800a1c4:	4b01      	ldr	r3, [pc, #4]	; (800a1cc <__errno+0x8>)
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	24000184 	.word	0x24000184

0800a1d0 <__libc_init_array>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	4e0d      	ldr	r6, [pc, #52]	; (800a208 <__libc_init_array+0x38>)
 800a1d4:	4c0d      	ldr	r4, [pc, #52]	; (800a20c <__libc_init_array+0x3c>)
 800a1d6:	1ba4      	subs	r4, r4, r6
 800a1d8:	10a4      	asrs	r4, r4, #2
 800a1da:	2500      	movs	r5, #0
 800a1dc:	42a5      	cmp	r5, r4
 800a1de:	d109      	bne.n	800a1f4 <__libc_init_array+0x24>
 800a1e0:	4e0b      	ldr	r6, [pc, #44]	; (800a210 <__libc_init_array+0x40>)
 800a1e2:	4c0c      	ldr	r4, [pc, #48]	; (800a214 <__libc_init_array+0x44>)
 800a1e4:	f000 f8f6 	bl	800a3d4 <_init>
 800a1e8:	1ba4      	subs	r4, r4, r6
 800a1ea:	10a4      	asrs	r4, r4, #2
 800a1ec:	2500      	movs	r5, #0
 800a1ee:	42a5      	cmp	r5, r4
 800a1f0:	d105      	bne.n	800a1fe <__libc_init_array+0x2e>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1f8:	4798      	blx	r3
 800a1fa:	3501      	adds	r5, #1
 800a1fc:	e7ee      	b.n	800a1dc <__libc_init_array+0xc>
 800a1fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a202:	4798      	blx	r3
 800a204:	3501      	adds	r5, #1
 800a206:	e7f2      	b.n	800a1ee <__libc_init_array+0x1e>
 800a208:	0800a474 	.word	0x0800a474
 800a20c:	0800a474 	.word	0x0800a474
 800a210:	0800a474 	.word	0x0800a474
 800a214:	0800a478 	.word	0x0800a478

0800a218 <malloc>:
 800a218:	4b02      	ldr	r3, [pc, #8]	; (800a224 <malloc+0xc>)
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f000 b86d 	b.w	800a2fc <_malloc_r>
 800a222:	bf00      	nop
 800a224:	24000184 	.word	0x24000184

0800a228 <free>:
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <free+0xc>)
 800a22a:	4601      	mov	r1, r0
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f000 b817 	b.w	800a260 <_free_r>
 800a232:	bf00      	nop
 800a234:	24000184 	.word	0x24000184

0800a238 <memcpy>:
 800a238:	b510      	push	{r4, lr}
 800a23a:	1e43      	subs	r3, r0, #1
 800a23c:	440a      	add	r2, r1
 800a23e:	4291      	cmp	r1, r2
 800a240:	d100      	bne.n	800a244 <memcpy+0xc>
 800a242:	bd10      	pop	{r4, pc}
 800a244:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a24c:	e7f7      	b.n	800a23e <memcpy+0x6>

0800a24e <memset>:
 800a24e:	4402      	add	r2, r0
 800a250:	4603      	mov	r3, r0
 800a252:	4293      	cmp	r3, r2
 800a254:	d100      	bne.n	800a258 <memset+0xa>
 800a256:	4770      	bx	lr
 800a258:	f803 1b01 	strb.w	r1, [r3], #1
 800a25c:	e7f9      	b.n	800a252 <memset+0x4>
	...

0800a260 <_free_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4605      	mov	r5, r0
 800a264:	2900      	cmp	r1, #0
 800a266:	d045      	beq.n	800a2f4 <_free_r+0x94>
 800a268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a26c:	1f0c      	subs	r4, r1, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfb8      	it	lt
 800a272:	18e4      	addlt	r4, r4, r3
 800a274:	f000 f8ac 	bl	800a3d0 <__malloc_lock>
 800a278:	4a1f      	ldr	r2, [pc, #124]	; (800a2f8 <_free_r+0x98>)
 800a27a:	6813      	ldr	r3, [r2, #0]
 800a27c:	4610      	mov	r0, r2
 800a27e:	b933      	cbnz	r3, 800a28e <_free_r+0x2e>
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	6014      	str	r4, [r2, #0]
 800a284:	4628      	mov	r0, r5
 800a286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a28a:	f000 b8a2 	b.w	800a3d2 <__malloc_unlock>
 800a28e:	42a3      	cmp	r3, r4
 800a290:	d90c      	bls.n	800a2ac <_free_r+0x4c>
 800a292:	6821      	ldr	r1, [r4, #0]
 800a294:	1862      	adds	r2, r4, r1
 800a296:	4293      	cmp	r3, r2
 800a298:	bf04      	itt	eq
 800a29a:	681a      	ldreq	r2, [r3, #0]
 800a29c:	685b      	ldreq	r3, [r3, #4]
 800a29e:	6063      	str	r3, [r4, #4]
 800a2a0:	bf04      	itt	eq
 800a2a2:	1852      	addeq	r2, r2, r1
 800a2a4:	6022      	streq	r2, [r4, #0]
 800a2a6:	6004      	str	r4, [r0, #0]
 800a2a8:	e7ec      	b.n	800a284 <_free_r+0x24>
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	b10a      	cbz	r2, 800a2b4 <_free_r+0x54>
 800a2b0:	42a2      	cmp	r2, r4
 800a2b2:	d9fa      	bls.n	800a2aa <_free_r+0x4a>
 800a2b4:	6819      	ldr	r1, [r3, #0]
 800a2b6:	1858      	adds	r0, r3, r1
 800a2b8:	42a0      	cmp	r0, r4
 800a2ba:	d10b      	bne.n	800a2d4 <_free_r+0x74>
 800a2bc:	6820      	ldr	r0, [r4, #0]
 800a2be:	4401      	add	r1, r0
 800a2c0:	1858      	adds	r0, r3, r1
 800a2c2:	4282      	cmp	r2, r0
 800a2c4:	6019      	str	r1, [r3, #0]
 800a2c6:	d1dd      	bne.n	800a284 <_free_r+0x24>
 800a2c8:	6810      	ldr	r0, [r2, #0]
 800a2ca:	6852      	ldr	r2, [r2, #4]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	4401      	add	r1, r0
 800a2d0:	6019      	str	r1, [r3, #0]
 800a2d2:	e7d7      	b.n	800a284 <_free_r+0x24>
 800a2d4:	d902      	bls.n	800a2dc <_free_r+0x7c>
 800a2d6:	230c      	movs	r3, #12
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	e7d3      	b.n	800a284 <_free_r+0x24>
 800a2dc:	6820      	ldr	r0, [r4, #0]
 800a2de:	1821      	adds	r1, r4, r0
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	bf04      	itt	eq
 800a2e4:	6811      	ldreq	r1, [r2, #0]
 800a2e6:	6852      	ldreq	r2, [r2, #4]
 800a2e8:	6062      	str	r2, [r4, #4]
 800a2ea:	bf04      	itt	eq
 800a2ec:	1809      	addeq	r1, r1, r0
 800a2ee:	6021      	streq	r1, [r4, #0]
 800a2f0:	605c      	str	r4, [r3, #4]
 800a2f2:	e7c7      	b.n	800a284 <_free_r+0x24>
 800a2f4:	bd38      	pop	{r3, r4, r5, pc}
 800a2f6:	bf00      	nop
 800a2f8:	240002d0 	.word	0x240002d0

0800a2fc <_malloc_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	1ccd      	adds	r5, r1, #3
 800a300:	f025 0503 	bic.w	r5, r5, #3
 800a304:	3508      	adds	r5, #8
 800a306:	2d0c      	cmp	r5, #12
 800a308:	bf38      	it	cc
 800a30a:	250c      	movcc	r5, #12
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	4606      	mov	r6, r0
 800a310:	db01      	blt.n	800a316 <_malloc_r+0x1a>
 800a312:	42a9      	cmp	r1, r5
 800a314:	d903      	bls.n	800a31e <_malloc_r+0x22>
 800a316:	230c      	movs	r3, #12
 800a318:	6033      	str	r3, [r6, #0]
 800a31a:	2000      	movs	r0, #0
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	f000 f857 	bl	800a3d0 <__malloc_lock>
 800a322:	4a21      	ldr	r2, [pc, #132]	; (800a3a8 <_malloc_r+0xac>)
 800a324:	6814      	ldr	r4, [r2, #0]
 800a326:	4621      	mov	r1, r4
 800a328:	b991      	cbnz	r1, 800a350 <_malloc_r+0x54>
 800a32a:	4c20      	ldr	r4, [pc, #128]	; (800a3ac <_malloc_r+0xb0>)
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	b91b      	cbnz	r3, 800a338 <_malloc_r+0x3c>
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f83d 	bl	800a3b0 <_sbrk_r>
 800a336:	6020      	str	r0, [r4, #0]
 800a338:	4629      	mov	r1, r5
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 f838 	bl	800a3b0 <_sbrk_r>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d124      	bne.n	800a38e <_malloc_r+0x92>
 800a344:	230c      	movs	r3, #12
 800a346:	6033      	str	r3, [r6, #0]
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 f842 	bl	800a3d2 <__malloc_unlock>
 800a34e:	e7e4      	b.n	800a31a <_malloc_r+0x1e>
 800a350:	680b      	ldr	r3, [r1, #0]
 800a352:	1b5b      	subs	r3, r3, r5
 800a354:	d418      	bmi.n	800a388 <_malloc_r+0x8c>
 800a356:	2b0b      	cmp	r3, #11
 800a358:	d90f      	bls.n	800a37a <_malloc_r+0x7e>
 800a35a:	600b      	str	r3, [r1, #0]
 800a35c:	50cd      	str	r5, [r1, r3]
 800a35e:	18cc      	adds	r4, r1, r3
 800a360:	4630      	mov	r0, r6
 800a362:	f000 f836 	bl	800a3d2 <__malloc_unlock>
 800a366:	f104 000b 	add.w	r0, r4, #11
 800a36a:	1d23      	adds	r3, r4, #4
 800a36c:	f020 0007 	bic.w	r0, r0, #7
 800a370:	1ac3      	subs	r3, r0, r3
 800a372:	d0d3      	beq.n	800a31c <_malloc_r+0x20>
 800a374:	425a      	negs	r2, r3
 800a376:	50e2      	str	r2, [r4, r3]
 800a378:	e7d0      	b.n	800a31c <_malloc_r+0x20>
 800a37a:	428c      	cmp	r4, r1
 800a37c:	684b      	ldr	r3, [r1, #4]
 800a37e:	bf16      	itet	ne
 800a380:	6063      	strne	r3, [r4, #4]
 800a382:	6013      	streq	r3, [r2, #0]
 800a384:	460c      	movne	r4, r1
 800a386:	e7eb      	b.n	800a360 <_malloc_r+0x64>
 800a388:	460c      	mov	r4, r1
 800a38a:	6849      	ldr	r1, [r1, #4]
 800a38c:	e7cc      	b.n	800a328 <_malloc_r+0x2c>
 800a38e:	1cc4      	adds	r4, r0, #3
 800a390:	f024 0403 	bic.w	r4, r4, #3
 800a394:	42a0      	cmp	r0, r4
 800a396:	d005      	beq.n	800a3a4 <_malloc_r+0xa8>
 800a398:	1a21      	subs	r1, r4, r0
 800a39a:	4630      	mov	r0, r6
 800a39c:	f000 f808 	bl	800a3b0 <_sbrk_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d0cf      	beq.n	800a344 <_malloc_r+0x48>
 800a3a4:	6025      	str	r5, [r4, #0]
 800a3a6:	e7db      	b.n	800a360 <_malloc_r+0x64>
 800a3a8:	240002d0 	.word	0x240002d0
 800a3ac:	240002d4 	.word	0x240002d4

0800a3b0 <_sbrk_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4c06      	ldr	r4, [pc, #24]	; (800a3cc <_sbrk_r+0x1c>)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	f7f6 fc2a 	bl	8000c14 <_sbrk>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_sbrk_r+0x1a>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_sbrk_r+0x1a>
 800a3c8:	602b      	str	r3, [r5, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	24001ce4 	.word	0x24001ce4

0800a3d0 <__malloc_lock>:
 800a3d0:	4770      	bx	lr

0800a3d2 <__malloc_unlock>:
 800a3d2:	4770      	bx	lr

0800a3d4 <_init>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr

0800a3e0 <_fini>:
 800a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3e2:	bf00      	nop
 800a3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e6:	bc08      	pop	{r3}
 800a3e8:	469e      	mov	lr, r3
 800a3ea:	4770      	bx	lr
